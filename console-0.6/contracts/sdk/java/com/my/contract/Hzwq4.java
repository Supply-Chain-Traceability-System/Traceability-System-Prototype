package com.my.contract;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.sdk.abi.FunctionReturnDecoder;
import org.fisco.bcos.sdk.abi.TypeReference;
import org.fisco.bcos.sdk.abi.datatypes.Bool;
import org.fisco.bcos.sdk.abi.datatypes.Function;
import org.fisco.bcos.sdk.abi.datatypes.Type;
import org.fisco.bcos.sdk.abi.datatypes.Utf8String;
import org.fisco.bcos.sdk.abi.datatypes.generated.Int256;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple1;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple2;
import org.fisco.bcos.sdk.client.Client;
import org.fisco.bcos.sdk.contract.Contract;
import org.fisco.bcos.sdk.crypto.CryptoSuite;
import org.fisco.bcos.sdk.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.model.CryptoType;
import org.fisco.bcos.sdk.model.TransactionReceipt;
import org.fisco.bcos.sdk.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.transaction.model.exception.ContractException;

@SuppressWarnings("unchecked")
public class Hzwq4 extends Contract {
    public static final String[] BINARY_ARRAY = {"","90505b80868381518110610fef57fe5b602002602001015188848151811061100357fe5b6020026020010151038161101357fe5b0485838151811061102057fe5b602002602001015114611064576000611059604051806060016040528060388152602001611b0c6038913961105485611869565b6119ad565b93509350505061185d565b5b508080600101915050610dc0565b5061181f565b6110b8896040518060400160405280600c81526020017f33c397323230562f333830560000000000000000000000000000000000000000815250610842565b80156110ff57506110fe886040518060400160405280600a81526020017f33c397312e352836294100000000000000000000000000000000000000000000815250610842565b5b80156111465750611145876040518060400160405280600481526020017f31e7baa700000000000000000000000000000000000000000000000000000000815250610842565b5b1561140c5760008090505b86518110156114065760007fe6ada3e59091e69c89e58a9f000000000000000000000000000000000000000088838151811061118957fe5b602002602001015114806111cf57507fe58f8de59091e69c89e58a9f00000000000000000000000000000000000000008883815181106111c557fe5b6020026020010151145b156112aa576101f48783815181106111e357fe5b602002602001015110156111fa5760009050611227565b6103e860016103e86101f48a868151811061121157fe5b6020026020010151038161122157fe5b04010290505b8086838151811061123457fe5b602002602001015188848151811061124857fe5b6020026020010151038161125857fe5b0485838151811061126557fe5b6020026020010151146112a957600061129e604051806060016040528060388152602001611b446038913961129985611869565b6119ad565b93509350505061185d565b5b7fe6ada3e59091e697a0e58a9f00000000000000000000000000000000000000008883815181106112d757fe5b6020026020010151148061131d57507fe58f8de59091e697a0e58a9f000000000000000000000000000000000000000088838151811061131357fe5b6020026020010151145b156113f8576103e887838151811061133157fe5b602002602001015110156113485760009050611375565b6107d060016107d06103e88a868151811061135f57fe5b6020026020010151038161136f57fe5b04010290505b8086838151811061138257fe5b602002602001015188848151811061139657fe5b602002602001015103816113a657fe5b048583815181106113b357fe5b6020026020010151146113f75760006113ec604051806060016040528060388152602001611b0c603891396113e785611869565b6119ad565b93509350505061185d565b5b508080600101915050611151565b5061181e565b61144b896040518060400160405280600c81526020017f33c397323230562f333830560000000000000000000000000000000000000000815250610842565b80156114925750611491886040518060400160405280600981526020017f33c3973528363029410000000000000000000000000000000000000000000000815250610842565b5b80156114d957506114d8876040518060400160405280600481526020017f31e7baa700000000000000000000000000000000000000000000000000000000815250610842565b5b1561181d5760008090505b865181101561181b5760007fe6ada3e59091e69c89e58a9f000000000000000000000000000000000000000088838151811061151c57fe5b6020026020010151148061156257507fe58f8de59091e69c89e58a9f000000000000000000000000000000000000000088838151811061155857fe5b6020026020010151145b156116bf576101f487838151811061157657fe5b6020026020010151101561158d57600090506115ba565b6103e860016103e86101f48a86815181106115a457fe5b602002602001015103816115b457fe5b04010290505b808683815181106115c757fe5b60200260200101518884815181106115db57fe5b602002602001015103816115eb57fe5b048583815181106115f857fe5b60200260200101511461163c576000611631604051806060016040528060388152602001611b446038913961162c85611869565b6119ad565b93509350505061185d565b8086838151811061164957fe5b602002602001015188848151811061165d57fe5b6020026020010151038161166d57fe5b0485838151811061167a57fe5b6020026020010151146116be5760006116b3604051806060016040528060388152602001611b44603891396116ae85611869565b6119ad565b93509350505061185d565b5b7fe6ada3e59091e697a0e58a9f00000000000000000000000000000000000000008883815181106116ec57fe5b6020026020010151148061173257507fe58f8de59091e697a0e58a9f000000000000000000000000000000000000000088838151811061172857fe5b6020026020010151145b1561180d576103e887838151811061174657fe5b6020026020010151101561175d576000905061178a565b6107d060016107d06103e88a868151811061177457fe5b6020026020010151038161178457fe5b04010290505b8086838151811061179757fe5b60200260200101518884815181106117ab57fe5b602002602001015103816117bb57fe5b048583815181106117c857fe5b60200260200101511461180c576000611801604051806060016040528060388152602001611b0c603891396117fc85611869565b6119ad565b93509350505061185d565b5b5080806001019150506114e4565b505b5b5b5b60016040518060400160405280600c81526020017fe5aea1e6a0b8e68890e58a9f0000000000000000000000000000000000000000815250915091505b97509795505050505050565b606060008214156118b1576040518060400160405280600181526020017f300000000000000000000000000000000000000000000000000000000000000081525090506119a8565b600082905060005b600082146118db578080600101915050600a82816118d357fe5b0491506118b9565b60608167ffffffffffffffff811180156118f457600080fd5b506040519080825280601f01601f1916602001820160405280156119275781602001600182028036833780820191505090505b50905060006001830390505b600086146119a057600a868161194557fe5b0660300160f81b8282806001900393508151811061195f57fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a868161199857fe5b049550611933565b819450505050505b919050565b60608083905060608390506060815183510167ffffffffffffffff811180156119d557600080fd5b506040519080825280601f01601f191660200182016040528015611a085781602001600182028036833780820191505090505b5090506060819050600080905060008090505b8551811015611a8957858181518110611a3057fe5b602001015160f81c60f81b838380600101945081518110611a4d57fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508080600101915050611a1b565b600090505b8451811015611afc57848181518110611aa357fe5b602001015160f81c60f81b838380600101945081518110611ac057fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508080600101915050611a8e565b8396505050505050509291505056fee697a0e58a9fe4b88de5b9b3e8a1a1e4b88ee5b9b3e8a1a1e8afafe5b7aee4b98be5b7aee79a84e9aa8ce8af81e4b88de59088e6a0bc3a20e69c89e58a9fe4b88de5b9b3e8a1a1e4b88ee5b9b3e8a1a1e8afafe5b7aee4b98be5b7aee79a84e9aa8ce8af81e4b88de59088e6a0bc3a20a2646970667358221220fe4d6e6afc4e385be617d7c6dac989c84fa7b18d2bc910e61d0e026ed048aab964736f6c634300060a0033"};

    public static final String BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {"608060405234801561001057600080fd5b50611bb1806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c8063115b1b50146100515780635e334f6a1461009357806386ce01b6146101fd578063bdf54d4414610367575b600080fd5b61007d6004803603602081101561006757600080fd5b8101908080359060200190929190505050610824565b6040518082815260200191505060405180910390f35b6101e3600480360360408110156100a957600080fd5b81019080803590602001906401000000008111156100c657600080fd5b8201836020820111156100d857600080fd5b803590602001918460018302840111640100000000831117156100fa57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192908035906020019064010000000081111561015d57600080fd5b82018360208201111561016f57600080fd5b8035906020019184600183028401116401000000008311171561019157600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050610842565b604051808215151515815260200191505060405180910390f35b61034d6004803603604081101561021357600080fd5b810190808035906020019064010000000081111561023057600080fd5b82018360208201111561024257600080fd5b8035906020019184600183028401116401000000008311171561026457600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290803590602001906401000000008111156102c757600080fd5b8201836020820111156102d957600080fd5b803590602001918460018302840111640100000000831117156102fb57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050610938565b604051808215151515815260200191505060405180910390f35b61079e600480360360e081101561037d57600080fd5b810190808035906020019064010000000081111561039a57600080fd5b8201836020820111156103ac57600080fd5b803590602001918460018302840111640100000000831117156103ce57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192908035906020019064010000000081111561043157600080fd5b82018360208201111561044357600080fd5b8035906020019184600183028401116401000000008311171561046557600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290803590602001906401000000008111156104c857600080fd5b8201836020820111156104da57600080fd5b803590602001918460018302840111640100000000831117156104fc57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192908035906020019064010000000081111561055f57600080fd5b82018360208201111561057157600080fd5b8035906020019184602083028401116401000000008311171561059357600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050509192919290803590602001906401000000008111156105f357600080fd5b82018360208201111561060557600080fd5b8035906020019184602083028401116401000000008311171561062757600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f8201169050808301925050505050505091929192908035906020019064010000000081111561068757600080fd5b82018360208201111561069957600080fd5b803590602001918460208302840111640100000000831117156106bb57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f8201169050808301925050505050505091929192908035906020019064010000000081111561071b57600080fd5b82018360208201111561072d57600080fd5b8035906020019184602083028401116401000000008311171561074f57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050509192919290505050610953565b604051808315151515815260200180602001828103825283818151815260200191508051906020019080838360005b838110156107e85780820151818401526020810190506107cd565b50505050905090810190601f1680156108155780820380516001836020036101000a031916815260200191505b50935050505060405180910390f35b6000808212156108395781600003905061083d565b8190505b919050565b6000606083905060608390506000815190506000809050600080905060008090505b85518110156109275784828151811061087957fe5b602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168682815181106108b257fe5b602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614156108fa5781806001019250508280600101935050610903565b60009250600091505b8383141561091a5760019650505050505050610932565b8080600101915050610864565b506000955050505050505b92915050565b60008180519060200120838051906020012014905092915050565b60006060610996896040518060400160405280600d81526020017f33c39735372e37562f3130305600000000000000000000000000000000000000815250610938565b80156109dd57506109dc886040518060400160405280600a81526020017f33c397312e352836294100000000000000000000000000000000000000000000815250610938565b5b8015610a245750610a23876040518060400160405280600481526020017f302e355300000000000000000000000000000000000000000000000000000000815250610938565b5b15610ce85760008090505b8651811015610ce25760007fe6ada3e59091e69c89e58a9f0000000000000000000000000000000000000000888381518110610a6757fe5b60200260200101511480610aad57507fe58f8de59091e69c89e58a9f0000000000000000000000000000000000000000888381518110610aa357fe5b6020026020010151145b15610b865760fa878381518110610ac057fe5b60200260200101511015610ad75760009050610b03565b6101f460016101f460fa8a8681518110610aed57fe5b60200260200101510381610afd57fe5b04010290505b80868381518110610b1057fe5b6020026020010151888481518110610b2457fe5b60200260200101510381610b3457fe5b04858381518110610b4157fe5b602002602001015114610b85576000610b7a604051806060016040528060388152602001611b4460389139610b7585611869565b6119ad565b93509350505061185d565b5b7fe6ada3e59091e697a0e58a9f0000000000000000000000000000000000000000888381518110610bb357fe5b60200260200101511480610bf957507fe58f8de59091e697a0e58a9f0000000000000000000000000000000000000000888381518110610bef57fe5b6020026020010151145b15610cd4576103e8878381518110610c0d57fe5b60200260200101511015610c245760009050610c51565b6107d060016107d06103e88a8681518110610c3b57fe5b60200260200101510381610c4b57fe5b04010290505b80868381518110610c5e57fe5b6020026020010151888481518110610c7257fe5b60200260200101510381610c8257fe5b04858381518110610c8f57fe5b602002602001015114610cd3576000610cc8604051806060016040528060388152602001611b0c60389139610cc385611869565b6119ad565b93509350505061185d565b5b508080600101915050610a2f565b50611820565b610d27896040518060400160405280600781526020017f33c3973130305600000000000000000000000000000000000000000000000000815250610938565b8015610d6e5750610d6d886040518060400160405280600a81526020017f33c397312e352836294100000000000000000000000000000000000000000000815250610938565b5b8015610db55750610db4876040518060400160405280600481526020017f302e355300000000000000000000000000000000000000000000000000000000815250610938565b5b156110795760008090505b86518110156110735760007fe6ada3e59091e69c89e58a9f0000000000000000000000000000000000000000888381518110610df857fe5b60200260200101511480610e3e57507fe58f8de59091e69c89e58a9f0000000000000000000000000000000000000000888381518110610e3457fe5b6020026020010151145b15610f175760fa878381518110610e5157fe5b60200260200101511015610e685760009050610e94565b6101f460016101f460fa8a8681518110610e7e57fe5b60200260200101510381610e8e57fe5b04010290505b80868381518110610ea157fe5b6020026020010151888481518110610eb557fe5b60200260200101510381610ec557fe5b04858381518110610ed257fe5b602002602001015114610f16576000610f0b604051806060016040528060388152602001611b4460389139610f0685611869565b6119ad565b93509350505061185d565b5b7fe6ada3e59091e697a0e58a9f0000000000000000000000000000000000000000888381518110610f4457fe5b60200260200101511480610f8a57507fe58f8de59091e697a0e58a9f0000000000000000000000000000000000000000888381518110610f8057fe5b6020026020010151145b15611065576103e8878381518110610f9e57fe5b60200260200101511015610fb55760009050610fe2565b6107d060016107d06103e88a8681518110610fcc57fe5b60200260200101510381610fdc57fe5b040102","90505b80868381518110610fef57fe5b602002602001015188848151811061100357fe5b6020026020010151038161101357fe5b0485838151811061102057fe5b602002602001015114611064576000611059604051806060016040528060388152602001611b0c6038913961105485611869565b6119ad565b93509350505061185d565b5b508080600101915050610dc0565b5061181f565b6110b8896040518060400160405280600c81526020017f33c397323230562f333830560000000000000000000000000000000000000000815250610938565b80156110ff57506110fe886040518060400160405280600a81526020017f33c397312e352836294100000000000000000000000000000000000000000000815250610938565b5b80156111465750611145876040518060400160405280600481526020017f31e7baa700000000000000000000000000000000000000000000000000000000815250610938565b5b1561140c5760008090505b86518110156114065760007fe6ada3e59091e69c89e58a9f000000000000000000000000000000000000000088838151811061118957fe5b602002602001015114806111cf57507fe58f8de59091e69c89e58a9f00000000000000000000000000000000000000008883815181106111c557fe5b6020026020010151145b156112aa576101f48783815181106111e357fe5b602002602001015110156111fa5760009050611227565b6103e860016103e86101f48a868151811061121157fe5b6020026020010151038161122157fe5b04010290505b8086838151811061123457fe5b602002602001015188848151811061124857fe5b6020026020010151038161125857fe5b0485838151811061126557fe5b6020026020010151146112a957600061129e604051806060016040528060388152602001611b446038913961129985611869565b6119ad565b93509350505061185d565b5b7fe6ada3e59091e697a0e58a9f00000000000000000000000000000000000000008883815181106112d757fe5b6020026020010151148061131d57507fe58f8de59091e697a0e58a9f000000000000000000000000000000000000000088838151811061131357fe5b6020026020010151145b156113f8576103e887838151811061133157fe5b602002602001015110156113485760009050611375565b6107d060016107d06103e88a868151811061135f57fe5b6020026020010151038161136f57fe5b04010290505b8086838151811061138257fe5b602002602001015188848151811061139657fe5b602002602001015103816113a657fe5b048583815181106113b357fe5b6020026020010151146113f75760006113ec604051806060016040528060388152602001611b0c603891396113e785611869565b6119ad565b93509350505061185d565b5b508080600101915050611151565b5061181e565b61144b896040518060400160405280600c81526020017f33c397323230562f333830560000000000000000000000000000000000000000815250610938565b80156114925750611491886040518060400160405280600981526020017f33c3973528363029410000000000000000000000000000000000000000000000815250610938565b5b80156114d957506114d8876040518060400160405280600481526020017f31e7baa700000000000000000000000000000000000000000000000000000000815250610938565b5b1561181d5760008090505b865181101561181b5760007fe6ada3e59091e69c89e58a9f000000000000000000000000000000000000000088838151811061151c57fe5b6020026020010151148061156257507fe58f8de59091e69c89e58a9f000000000000000000000000000000000000000088838151811061155857fe5b6020026020010151145b156116bf576101f487838151811061157657fe5b6020026020010151101561158d57600090506115ba565b6103e860016103e86101f48a86815181106115a457fe5b602002602001015103816115b457fe5b04010290505b808683815181106115c757fe5b60200260200101518884815181106115db57fe5b602002602001015103816115eb57fe5b048583815181106115f857fe5b60200260200101511461163c576000611631604051806060016040528060388152602001611b446038913961162c85611869565b6119ad565b93509350505061185d565b8086838151811061164957fe5b602002602001015188848151811061165d57fe5b6020026020010151038161166d57fe5b0485838151811061167a57fe5b6020026020010151146116be5760006116b3604051806060016040528060388152602001611b44603891396116ae85611869565b6119ad565b93509350505061185d565b5b7fe6ada3e59091e697a0e58a9f00000000000000000000000000000000000000008883815181106116ec57fe5b6020026020010151148061173257507fe58f8de59091e697a0e58a9f000000000000000000000000000000000000000088838151811061172857fe5b6020026020010151145b1561180d576103e887838151811061174657fe5b6020026020010151101561175d576000905061178a565b6107d060016107d06103e88a868151811061177457fe5b6020026020010151038161178457fe5b04010290505b8086838151811061179757fe5b60200260200101518884815181106117ab57fe5b602002602001015103816117bb57fe5b048583815181106117c857fe5b60200260200101511461180c576000611801604051806060016040528060388152602001611b0c603891396117fc85611869565b6119ad565b93509350505061185d565b5b5080806001019150506114e4565b505b5b5b5b60016040518060400160405280600c81526020017fe5aea1e6a0b8e68890e58a9f0000000000000000000000000000000000000000815250915091505b97509795505050505050565b606060008214156118b1576040518060400160405280600181526020017f300000000000000000000000000000000000000000000000000000000000000081525090506119a8565b600082905060005b600082146118db578080600101915050600a82816118d357fe5b0491506118b9565b60608167ffffffffffffffff811180156118f457600080fd5b506040519080825280601f01601f1916602001820160405280156119275781602001600182028036833780820191505090505b50905060006001830390505b600086146119a057600a868161194557fe5b0660300160f81b8282806001900393508151811061195f57fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a868161199857fe5b049550611933565b819450505050505b919050565b60608083905060608390506060815183510167ffffffffffffffff811180156119d557600080fd5b506040519080825280601f01601f191660200182016040528015611a085781602001600182028036833780820191505090505b5090506060819050600080905060008090505b8551811015611a8957858181518110611a3057fe5b602001015160f81c60f81b838380600101945081518110611a4d57fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508080600101915050611a1b565b600090505b8451811015611afc57848181518110611aa357fe5b602001015160f81c60f81b838380600101945081518110611ac057fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508080600101915050611a8e565b8396505050505050509291505056fee697a0e58a9fe4b88de5b9b3e8a1a1e4b88ee5b9b3e8a1a1e8afafe5b7aee4b98be5b7aee79a84e9aa8ce8af81e4b88de59088e6a0bc3a20e69c89e58a9fe4b88de5b9b3e8a1a1e4b88ee5b9b3e8a1a1e8afafe5b7aee4b98be5b7aee79a84e9aa8ce8af81e4b88de59088e6a0bc3a20a264697066735822122081b494d50da0c63a98b615d34024122837a8a3c4a1ab77ded8b9e984a4ad567664736f6c634300060a0033"};

    public static final String SM_BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"_x\",\"type\":\"int256\"}],\"name\":\"abs\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_source\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_pattern\",\"type\":\"string\"}],\"name\":\"checkStr\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_volt_code\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_rated_current\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_ap_pre_level_code\",\"type\":\"string\"},{\"internalType\":\"bytes32[]\",\"name\":\"_both_way_power_flag\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_ave_err1\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_ave_err2\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_int_convert_err\",\"type\":\"uint256[]\"}],\"name\":\"examine6\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_a\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_b\",\"type\":\"string\"}],\"name\":\"hashCompareInternal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]"};

    public static final String ABI = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", ABI_ARRAY);

    public static final String FUNC_ABS = "abs";

    public static final String FUNC_CHECKSTR = "checkStr";

    public static final String FUNC_EXAMINE6 = "examine6";

    public static final String FUNC_HASHCOMPAREINTERNAL = "hashCompareInternal";

    protected Hzwq4(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public TransactionReceipt abs(BigInteger _x) {
        final Function function = new Function(
                FUNC_ABS, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(_x)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void abs(BigInteger _x, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ABS, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(_x)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForAbs(BigInteger _x) {
        final Function function = new Function(
                FUNC_ABS, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(_x)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<BigInteger> getAbsInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ABS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public Tuple1<BigInteger> getAbsOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_ABS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public TransactionReceipt checkStr(String _source, String _pattern) {
        final Function function = new Function(
                FUNC_CHECKSTR, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_source), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_pattern)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void checkStr(String _source, String _pattern, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_CHECKSTR, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_source), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_pattern)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForCheckStr(String _source, String _pattern) {
        final Function function = new Function(
                FUNC_CHECKSTR, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_source), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_pattern)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, String> getCheckStrInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_CHECKSTR, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue()
                );
    }

    public Tuple1<Boolean> getCheckStrOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_CHECKSTR, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public Tuple2<Boolean, String> examine6(String _volt_code, String _rated_current, String _ap_pre_level_code, List<byte[]> _both_way_power_flag, List<BigInteger> _ave_err1, List<BigInteger> _ave_err2, List<BigInteger> _int_convert_err) throws ContractException {
        final Function function = new Function(FUNC_EXAMINE6, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_volt_code), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_rated_current), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_ap_pre_level_code), 
                _both_way_power_flag.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("bytes32[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(_both_way_power_flag, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class)), 
                _ave_err1.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("uint256[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.generated.Uint256>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(_ave_err1, org.fisco.bcos.sdk.abi.datatypes.generated.Uint256.class)), 
                _ave_err2.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("uint256[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.generated.Uint256>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(_ave_err2, org.fisco.bcos.sdk.abi.datatypes.generated.Uint256.class)), 
                _int_convert_err.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("uint256[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.generated.Uint256>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(_int_convert_err, org.fisco.bcos.sdk.abi.datatypes.generated.Uint256.class))), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple2<Boolean, String>(
                (Boolean) results.get(0).getValue(), 
                (String) results.get(1).getValue());
    }

    public TransactionReceipt hashCompareInternal(String _a, String _b) {
        final Function function = new Function(
                FUNC_HASHCOMPAREINTERNAL, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_a), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_b)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void hashCompareInternal(String _a, String _b, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_HASHCOMPAREINTERNAL, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_a), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_b)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForHashCompareInternal(String _a, String _b) {
        final Function function = new Function(
                FUNC_HASHCOMPAREINTERNAL, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_a), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_b)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, String> getHashCompareInternalInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_HASHCOMPAREINTERNAL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue()
                );
    }

    public Tuple1<Boolean> getHashCompareInternalOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_HASHCOMPAREINTERNAL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public static Hzwq4 load(String contractAddress, Client client, CryptoKeyPair credential) {
        return new Hzwq4(contractAddress, client, credential);
    }

    public static Hzwq4 deploy(Client client, CryptoKeyPair credential) throws ContractException {
        return deploy(Hzwq4.class, client, credential, getBinary(client.getCryptoSuite()), "");
    }
}
