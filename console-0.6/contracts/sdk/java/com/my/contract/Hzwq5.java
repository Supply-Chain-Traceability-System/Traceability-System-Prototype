package com.my.contract;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.sdk.abi.FunctionReturnDecoder;
import org.fisco.bcos.sdk.abi.TypeReference;
import org.fisco.bcos.sdk.abi.datatypes.Bool;
import org.fisco.bcos.sdk.abi.datatypes.Function;
import org.fisco.bcos.sdk.abi.datatypes.Type;
import org.fisco.bcos.sdk.abi.datatypes.Utf8String;
import org.fisco.bcos.sdk.abi.datatypes.generated.Int256;
import org.fisco.bcos.sdk.abi.datatypes.generated.Uint256;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple1;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple2;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple3;
import org.fisco.bcos.sdk.client.Client;
import org.fisco.bcos.sdk.contract.Contract;
import org.fisco.bcos.sdk.crypto.CryptoSuite;
import org.fisco.bcos.sdk.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.model.CryptoType;
import org.fisco.bcos.sdk.model.TransactionReceipt;
import org.fisco.bcos.sdk.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.transaction.model.exception.ContractException;

@SuppressWarnings("unchecked")
public class Hzwq5 extends Contract {
    public static final String[] BINARY_ARRAY = {"","00000000000000000000008152509080905094509450945050505b93509350939050565b600060606000610f5e886040518060400160405280600681526020017fe59088e6a0bc0000000000000000000000000000000000000000000000000000815250610994565b610f8d576000806040518060600160405280602181526020016114666021913990809050925092509250611193565b60008090505b845181101561114e576000866003600584020181518110610fb057fe5b6020026020010151876002600585020181518110610fca57fe5b6020026020010151886001600586020181518110610fe457fe5b6020026020010151896000600587020181518110610ffe57fe5b60200260200101510101019050600087600460058502018151811061101f57fe5b6020026020010151905060008090505b60058110156110e3576110738a8260058702018151811061104c57fe5b60200260200101518c8360058802018151811061106557fe5b602002602001015103610976565b898260058702018151811061108457fe5b6020026020010151146110d65760006110c2604051806060016040528060258152602001611487602591396110bd84600589020161119e565b6112e2565b600080905096509650965050505050611193565b808060010191505061102f565b508181038784815181106110f357fe5b60200260200101511461113f57600061112c604051806060016040528060258152602001611441602591396111278661119e565b6112e2565b6000809050955095509550505050611193565b50508080600101915050610f93565b506001806040518060400160405280600c81526020017fe5aea1e6a0b8e68890e58a9f0000000000000000000000000000000000000000815250908090509250925092505b955095509592505050565b606060008214156111e6576040518060400160405280600181526020017f300000000000000000000000000000000000000000000000000000000000000081525090506112dd565b600082905060005b60008214611210578080600101915050600a828161120857fe5b0491506111ee565b60608167ffffffffffffffff8111801561122957600080fd5b506040519080825280601f01601f19166020018201604052801561125c5781602001600182028036833780820191505090505b50905060006001830390505b600086146112d557600a868161127a57fe5b0660300160f81b8282806001900393508151811061129457fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a86816112cd57fe5b049550611268565b819450505050505b919050565b60608083905060608390506060815183510167ffffffffffffffff8111801561130a57600080fd5b506040519080825280601f01601f19166020018201604052801561133d5781602001600182028036833780820191505090505b5090506060819050600080905060008090505b85518110156113be5785818151811061136557fe5b602001015160f81c60f81b83838060010194508151811061138257fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508080600101915050611350565b600090505b8451811015611431578481815181106113d857fe5b602001015160f81c60f81b8383806001019450815181106113f557fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535080806001019150506113c3565b8396505050505050509291505056fee794b5e883bde7a4bae580bce79a84e7bb84e59088e8afafe5b7aee4b88de59088e6a0bc32e6a380e69fa5e794b5e883bde7a4bae580bce8afafe5b7aee4b88de59088e6a0bce794b5e883bde7a4bae580bce79a84e7bb84e59088e8afafe5b7aee4b88de59088e6a0bc31e6a380e69fa5e99c80e9878fe7a4bae580bce8afafe5b7aee4b88de59088e6a0bca26469706673582212208f9bf4812490fbd7729985ec7cb47ce39d8fdef34197cd727b800807e330163364736f6c634300060a0033"};

    public static final String BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {"","01010190506000876004600585020181518110610f0e57fe5b6020026020010151905060008090505b6005811015610fd257610f628a82600587020181518110610f3b57fe5b60200260200101518c83600588020181518110610f5457fe5b602002602001015103610dea565b8982600587020181518110610f7357fe5b602002602001015114610fc5576000610fb160405180606001604052806025815260200161148760259139610fac84600589020161119e565b6112e2565b600080905096509650965050505050611082565b8080600101915050610f1e565b50818103878481518110610fe257fe5b60200260200101511461102e57600061101b604051806060016040528060258152602001611441602591396110168661119e565b6112e2565b6000809050955095509550505050611082565b50508080600101915050610e82565b506001806040518060400160405280600c81526020017fe5aea1e6a0b8e68890e58a9f0000000000000000000000000000000000000000815250908090509250925092505b955095509592505050565b6000606083905060608390506000815190506000809050600080905060008090505b8551811015611172578482815181106110c457fe5b602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168682815181106110fd57fe5b602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161415611145578180600101925050828060010193505061114e565b60009250600091505b83831415611165576001965050505050505061117d565b80806001019150506110af565b506000955050505050505b92915050565b60008180519060200120838051906020012014905092915050565b606060008214156111e6576040518060400160405280600181526020017f300000000000000000000000000000000000000000000000000000000000000081525090506112dd565b600082905060005b60008214611210578080600101915050600a828161120857fe5b0491506111ee565b60608167ffffffffffffffff8111801561122957600080fd5b506040519080825280601f01601f19166020018201604052801561125c5781602001600182028036833780820191505090505b50905060006001830390505b600086146112d557600a868161127a57fe5b0660300160f81b8282806001900393508151811061129457fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a86816112cd57fe5b049550611268565b819450505050505b919050565b60608083905060608390506060815183510167ffffffffffffffff8111801561130a57600080fd5b506040519080825280601f01601f19166020018201604052801561133d5781602001600182028036833780820191505090505b5090506060819050600080905060008090505b85518110156113be5785818151811061136557fe5b602001015160f81c60f81b83838060010194508151811061138257fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508080600101915050611350565b600090505b8451811015611431578481815181106113d857fe5b602001015160f81c60f81b8383806001019450815181106113f557fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535080806001019150506113c3565b8396505050505050509291505056fee794b5e883bde7a4bae580bce79a84e7bb84e59088e8afafe5b7aee4b88de59088e6a0bc32e6a380e69fa5e794b5e883bde7a4bae580bce8afafe5b7aee4b88de59088e6a0bce794b5e883bde7a4bae580bce79a84e7bb84e59088e8afafe5b7aee4b88de59088e6a0bc31e6a380e69fa5e99c80e9878fe7a4bae580bce8afafe5b7aee4b88de59088e6a0bca26469706673582212205739231ad608240172f1656654f7e284d6cf6ea0eac25dc4b570df9915bca06264736f6c634300060a0033"};

    public static final String SM_BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"_x\",\"type\":\"int256\"}],\"name\":\"abs\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_source\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_pattern\",\"type\":\"string\"}],\"name\":\"checkStr\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"clock_conc\",\"type\":\"string\"},{\"internalType\":\"int256[]\",\"name\":\"start_values\",\"type\":\"int256[]\"},{\"internalType\":\"int256[]\",\"name\":\"end_values\",\"type\":\"int256[]\"},{\"internalType\":\"int256[]\",\"name\":\"ele_increments\",\"type\":\"int256[]\"},{\"internalType\":\"int256[]\",\"name\":\"value_conc_codes\",\"type\":\"int256[]\"}],\"name\":\"examine6\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"ap_pre_level_code\",\"type\":\"string\"},{\"internalType\":\"bytes32[]\",\"name\":\"load_current\",\"type\":\"bytes32[]\"},{\"internalType\":\"int256[]\",\"name\":\"demand_value_err\",\"type\":\"int256[]\"}],\"name\":\"examine7\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_a\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_b\",\"type\":\"string\"}],\"name\":\"hashCompareInternal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]"};

    public static final String ABI = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", ABI_ARRAY);

    public static final String FUNC_ABS = "abs";

    public static final String FUNC_CHECKSTR = "checkStr";

    public static final String FUNC_EXAMINE6 = "examine6";

    public static final String FUNC_EXAMINE7 = "examine7";

    public static final String FUNC_HASHCOMPAREINTERNAL = "hashCompareInternal";

    protected Hzwq5(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public TransactionReceipt abs(BigInteger _x) {
        final Function function = new Function(
                FUNC_ABS, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(_x)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void abs(BigInteger _x, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ABS, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(_x)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForAbs(BigInteger _x) {
        final Function function = new Function(
                FUNC_ABS, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(_x)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<BigInteger> getAbsInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ABS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public Tuple1<BigInteger> getAbsOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_ABS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public TransactionReceipt checkStr(String _source, String _pattern) {
        final Function function = new Function(
                FUNC_CHECKSTR, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_source), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_pattern)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void checkStr(String _source, String _pattern, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_CHECKSTR, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_source), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_pattern)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForCheckStr(String _source, String _pattern) {
        final Function function = new Function(
                FUNC_CHECKSTR, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_source), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_pattern)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, String> getCheckStrInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_CHECKSTR, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue()
                );
    }

    public Tuple1<Boolean> getCheckStrOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_CHECKSTR, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public Tuple3<Boolean, String, BigInteger> examine6(String clock_conc, List<BigInteger> start_values, List<BigInteger> end_values, List<BigInteger> ele_increments, List<BigInteger> value_conc_codes) throws ContractException {
        final Function function = new Function(FUNC_EXAMINE6, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(clock_conc), 
                start_values.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("int256[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.generated.Int256>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(start_values, org.fisco.bcos.sdk.abi.datatypes.generated.Int256.class)), 
                end_values.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("int256[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.generated.Int256>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(end_values, org.fisco.bcos.sdk.abi.datatypes.generated.Int256.class)), 
                ele_increments.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("int256[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.generated.Int256>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(ele_increments, org.fisco.bcos.sdk.abi.datatypes.generated.Int256.class)), 
                value_conc_codes.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("int256[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.generated.Int256>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(value_conc_codes, org.fisco.bcos.sdk.abi.datatypes.generated.Int256.class))), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple3<Boolean, String, BigInteger>(
                (Boolean) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue());
    }

    public Tuple3<Boolean, String, BigInteger> examine7(String ap_pre_level_code, List<byte[]> load_current, List<BigInteger> demand_value_err) throws ContractException {
        final Function function = new Function(FUNC_EXAMINE7, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(ap_pre_level_code), 
                load_current.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("bytes32[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(load_current, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class)), 
                demand_value_err.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("int256[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.generated.Int256>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(demand_value_err, org.fisco.bcos.sdk.abi.datatypes.generated.Int256.class))), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple3<Boolean, String, BigInteger>(
                (Boolean) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue());
    }

    public TransactionReceipt hashCompareInternal(String _a, String _b) {
        final Function function = new Function(
                FUNC_HASHCOMPAREINTERNAL, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_a), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_b)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void hashCompareInternal(String _a, String _b, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_HASHCOMPAREINTERNAL, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_a), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_b)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForHashCompareInternal(String _a, String _b) {
        final Function function = new Function(
                FUNC_HASHCOMPAREINTERNAL, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_a), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_b)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, String> getHashCompareInternalInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_HASHCOMPAREINTERNAL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue()
                );
    }

    public Tuple1<Boolean> getHashCompareInternalOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_HASHCOMPAREINTERNAL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public static Hzwq5 load(String contractAddress, Client client, CryptoKeyPair credential) {
        return new Hzwq5(contractAddress, client, credential);
    }

    public static Hzwq5 deploy(Client client, CryptoKeyPair credential) throws ContractException {
        return deploy(Hzwq5.class, client, credential, getBinary(client.getCryptoSuite()), "");
    }
}
