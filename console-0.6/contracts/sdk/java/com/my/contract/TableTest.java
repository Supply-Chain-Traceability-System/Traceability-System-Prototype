package com.my.contract;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.sdk.abi.FunctionReturnDecoder;
import org.fisco.bcos.sdk.abi.TypeReference;
import org.fisco.bcos.sdk.abi.datatypes.DynamicArray;
import org.fisco.bcos.sdk.abi.datatypes.Event;
import org.fisco.bcos.sdk.abi.datatypes.Function;
import org.fisco.bcos.sdk.abi.datatypes.Type;
import org.fisco.bcos.sdk.abi.datatypes.Utf8String;
import org.fisco.bcos.sdk.abi.datatypes.generated.Int256;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple1;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple2;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple3;
import org.fisco.bcos.sdk.client.Client;
import org.fisco.bcos.sdk.contract.Contract;
import org.fisco.bcos.sdk.crypto.CryptoSuite;
import org.fisco.bcos.sdk.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.eventsub.EventCallback;
import org.fisco.bcos.sdk.model.CryptoType;
import org.fisco.bcos.sdk.model.TransactionReceipt;
import org.fisco.bcos.sdk.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.transaction.model.exception.ContractException;

@SuppressWarnings("unchecked")
public class TableTest extends Contract {
    public static final String[] BINARY_ARRAY = {"60806040523480156200001157600080fd5b506110016000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166356004b6a6040518060400160405280600681526020017f745f7465737400000000000000000000000000000000000000000000000000008152506040518263ffffffff1660e01b8152600401620000e591906200024a565b602060405180830381600087803b1580156200010057600080fd5b505af115801562000115573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200013b919062000159565b506200031f565b600081519050620001538162000305565b92915050565b6000602082840312156200016c57600080fd5b60006200017c8482850162000142565b91505092915050565b6000620001928262000298565b6200019e8185620002a3565b9350620001b0818560208601620002be565b620001bb81620002f4565b840191505092915050565b6000620001d5600483620002a3565b91507f6e616d65000000000000000000000000000000000000000000000000000000006000830152602082019050919050565b600062000217601183620002a3565b91507f6974656d5f69642c6974656d5f6e616d650000000000000000000000000000006000830152602082019050919050565b6000606082019050818103600083015262000266818462000185565b905081810360208301526200027b81620001c6565b90508181036040830152620002908162000208565b905092915050565b600081519050919050565b600082825260208201905092915050565b6000819050919050565b60005b83811015620002de578082015181840152602081019050620002c1565b83811115620002ee576000848401525b50505050565b6000601f19601f8301169050919050565b6200031081620002b4565b81146200031c57600080fd5b50565b611da7806200032f6000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c8063487a5a1014610051578063c4f41ab314610081578063ebf3b24f146100b1578063fcd7e3c1146100e1575b600080fd5b61006b600480360381019061006691906115dc565b610113565b6040516100789190611914565b60405180910390f35b61009b60048036038101906100969190611588565b610510565b6040516100a89190611914565b60405180910390f35b6100cb60048036038101906100c691906115dc565b61081c565b6040516100d89190611914565b60405180910390f35b6100fb60048036038101906100f69190611506565b610b98565b60405161010a939291906118c8565b60405180910390f35b6000806000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f23f63c96040518060400160405280600681526020017f745f7465737400000000000000000000000000000000000000000000000000008152506040518263ffffffff1660e01b81526004016101a5919061192f565b60206040518083038186803b1580156101bd57600080fd5b505afa1580156101d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101f591906114b4565b905060008173ffffffffffffffffffffffffffffffffffffffff166313db93466040518163ffffffff1660e01b815260040160206040518083038186803b15801561023f57600080fd5b505afa158015610253573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610277919061148b565b90508073ffffffffffffffffffffffffffffffffffffffff1663e942b516856040518263ffffffff1660e01b81526004016102b29190611a64565b600060405180830381600087803b1580156102cc57600080fd5b505af11580156102e0573d6000803e3d6000fd5b5050505060008273ffffffffffffffffffffffffffffffffffffffff16637857d7c96040518163ffffffff1660e01b815260040160206040518083038186803b15801561032c57600080fd5b505afa158015610340573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103649190611439565b90508073ffffffffffffffffffffffffffffffffffffffff1663cd30a1d1886040518263ffffffff1660e01b815260040161039f9190611a0f565b60006040518083038186803b1580156103b757600080fd5b505afa1580156103cb573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff1663e44594b9876040518263ffffffff1660e01b81526004016104089190611ab9565b60006040518083038186803b15801561042057600080fd5b505afa158015610434573d6000803e3d6000fd5b5050505060008373ffffffffffffffffffffffffffffffffffffffff1663bf2b70a18985856040518463ffffffff1660e01b8152600401610477939291906119b1565b602060405180830381600087803b15801561049157600080fd5b505af11580156104a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104c991906114dd565b90507f8e5890af40fc24a059396aca2f83d6ce41fcef086876548fa4fb8ec27e9d292a816040516104fa9190611914565b60405180910390a1809450505050509392505050565b6000806000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f23f63c96040518060400160405280600681526020017f745f7465737400000000000000000000000000000000000000000000000000008152506040518263ffffffff1660e01b81526004016105a2919061192f565b60206040518083038186803b1580156105ba57600080fd5b505afa1580156105ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105f291906114b4565b905060008173ffffffffffffffffffffffffffffffffffffffff16637857d7c96040518163ffffffff1660e01b815260040160206040518083038186803b15801561063c57600080fd5b505afa158015610650573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106749190611439565b90508073ffffffffffffffffffffffffffffffffffffffff1663cd30a1d1866040518263ffffffff1660e01b81526004016106af9190611a0f565b60006040518083038186803b1580156106c757600080fd5b505afa1580156106db573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff1663e44594b9856040518263ffffffff1660e01b81526004016107189190611ab9565b60006040518083038186803b15801561073057600080fd5b505afa158015610744573d6000803e3d6000fd5b5050505060008273ffffffffffffffffffffffffffffffffffffffff166328bb211787846040518363ffffffff1660e01b8152600401610785929190611951565b602060405180830381600087803b15801561079f57600080fd5b505af11580156107b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107d791906114dd565b90507f4b930e280fe29620bdff00c88155d46d6d82a39f45dd5c3ea114dc3157358112816040516108089190611914565b60405180910390a180935050505092915050565b6000806000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f23f63c96040518060400160405280600681526020017f745f7465737400000000000000000000000000000000000000000000000000008152506040518263ffffffff1660e01b81526004016108ae919061192f565b60206040518083038186803b1580156108c657600080fd5b505afa1580156108da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108fe91906114b4565b905060008173ffffffffffffffffffffffffffffffffffffffff166313db93466040518163ffffffff1660e01b815260040160206040518083038186803b15801561094857600080fd5b505afa15801561095c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610980919061148b565b90508073ffffffffffffffffffffffffffffffffffffffff1663e942b516876040518263ffffffff1660e01b81526004016109bb9190611a0f565b600060405180830381600087803b1580156109d557600080fd5b505af11580156109e9573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16632ef8ba74866040518263ffffffff1660e01b8152600401610a269190611ab9565b600060405180830381600087803b158015610a4057600080fd5b505af1158015610a54573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff1663e942b516856040518263ffffffff1660e01b8152600401610a919190611a64565b600060405180830381600087803b158015610aab57600080fd5b505af1158015610abf573d6000803e3d6000fd5b5050505060008273ffffffffffffffffffffffffffffffffffffffff166331afac3688846040518363ffffffff1660e01b8152600401610b00929190611981565b602060405180830381600087803b158015610b1a57600080fd5b505af1158015610b2e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b5291906114dd565b90507fc57b01fa77f41df77eaab79a0e2623fab2e7ae3e9530d9b1cab225ad65f2b7ce81604051610b839190611914565b60405180910390a18093505050509392505050565b606080606060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f23f63c96040518060400160405280600681526020017f745f7465737400000000000000000000000000000000000000000000000000008152506040518263ffffffff1660e01b8152600401610c2e919061192f565b60206040518083038186803b158015610c4657600080fd5b505afa158015610c5a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c7e91906114b4565b905060008173ffffffffffffffffffffffffffffffffffffffff16637857d7c96040518163ffffffff1660e01b815260040160206040518083038186803b158015610cc857600080fd5b505afa158015610c","dc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d009190611439565b905060008273ffffffffffffffffffffffffffffffffffffffff1663e8434e3988846040518363ffffffff1660e01b8152600401610d3f929190611951565b60206040518083038186803b158015610d5757600080fd5b505afa158015610d6b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d8f9190611462565b905060608173ffffffffffffffffffffffffffffffffffffffff1663949d225d6040518163ffffffff1660e01b815260040160206040518083038186803b158015610dd957600080fd5b505afa158015610ded573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e1191906114dd565b67ffffffffffffffff81118015610e2757600080fd5b50604051908082528060200260200182016040528015610e5b57816020015b6060815260200190600190039081610e465790505b50905060608273ffffffffffffffffffffffffffffffffffffffff1663949d225d6040518163ffffffff1660e01b815260040160206040518083038186803b158015610ea657600080fd5b505afa158015610eba573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ede91906114dd565b67ffffffffffffffff81118015610ef457600080fd5b50604051908082528060200260200182016040528015610f235781602001602082028036833780820191505090505b50905060608373ffffffffffffffffffffffffffffffffffffffff1663949d225d6040518163ffffffff1660e01b815260040160206040518083038186803b158015610f6e57600080fd5b505afa158015610f82573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fa691906114dd565b67ffffffffffffffff81118015610fbc57600080fd5b50604051908082528060200260200182016040528015610ff057816020015b6060815260200190600190039081610fdb5790505b50905060008090505b8473ffffffffffffffffffffffffffffffffffffffff1663949d225d6040518163ffffffff1660e01b815260040160206040518083038186803b15801561103f57600080fd5b505afa158015611053573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061107791906114dd565b8112156112fc5760008573ffffffffffffffffffffffffffffffffffffffff1663846719e0836040518263ffffffff1660e01b81526004016110b99190611914565b60206040518083038186803b1580156110d157600080fd5b505afa1580156110e5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611109919061148b565b90508073ffffffffffffffffffffffffffffffffffffffff16639c981fcb6040518163ffffffff1660e01b8152600401611142906119ef565b60006040518083038186803b15801561115a57600080fd5b505afa15801561116e573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906111979190611547565b8583815181106111a357fe5b60200260200101819052508073ffffffffffffffffffffffffffffffffffffffff1663fda69fae6040518163ffffffff1660e01b81526004016111e590611a99565b60206040518083038186803b1580156111fd57600080fd5b505afa158015611211573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061123591906114dd565b84838151811061124157fe5b6020026020010181815250508073ffffffffffffffffffffffffffffffffffffffff16639c981fcb6040518163ffffffff1660e01b815260040161128490611a44565b60006040518083038186803b15801561129c57600080fd5b505afa1580156112b0573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906112d99190611547565b8383815181106112e557fe5b602002602001018190525050806001019050610ff9565b508282829850985098505050505050509193909250565b60008151905061132281611cfe565b92915050565b60008151905061133781611d15565b92915050565b60008151905061134c81611d2c565b92915050565b60008151905061136181611d43565b92915050565b60008135905061137681611d5a565b92915050565b60008151905061138b81611d5a565b92915050565b600082601f8301126113a257600080fd5b81356113b56113b082611b14565b611ae7565b915080825260208301602083018583830111156113d157600080fd5b6113dc838284611cab565b50505092915050565b600082601f8301126113f657600080fd5b815161140961140482611b14565b611ae7565b9150808252602083016020830185838301111561142557600080fd5b611430838284611cba565b50505092915050565b60006020828403121561144b57600080fd5b600061145984828501611313565b91505092915050565b60006020828403121561147457600080fd5b600061148284828501611328565b91505092915050565b60006020828403121561149d57600080fd5b60006114ab8482850161133d565b91505092915050565b6000602082840312156114c657600080fd5b60006114d484828501611352565b91505092915050565b6000602082840312156114ef57600080fd5b60006114fd8482850161137c565b91505092915050565b60006020828403121561151857600080fd5b600082013567ffffffffffffffff81111561153257600080fd5b61153e84828501611391565b91505092915050565b60006020828403121561155957600080fd5b600082015167ffffffffffffffff81111561157357600080fd5b61157f848285016113e5565b91505092915050565b6000806040838503121561159b57600080fd5b600083013567ffffffffffffffff8111156115b557600080fd5b6115c185828601611391565b92505060206115d285828601611367565b9150509250929050565b6000806000606084860312156115f157600080fd5b600084013567ffffffffffffffff81111561160b57600080fd5b61161786828701611391565b935050602061162886828701611367565b925050604084013567ffffffffffffffff81111561164557600080fd5b61165186828701611391565b9150509250925092565b60006116678383611778565b60208301905092915050565b600061167f8383611796565b905092915050565b600061169282611b60565b61169c8185611b9b565b93506116a783611b40565b8060005b838110156116d85781516116bf888261165b565b97506116ca83611b81565b9250506001810190506116ab565b5085935050505092915050565b60006116f082611b6b565b6116fa8185611bac565b93508360208202850161170c85611b50565b8060005b8581101561174857848403895281516117298582611673565b945061173483611b8e565b925060208a01995050600181019050611710565b50829750879550505050505092915050565b61176381611c63565b82525050565b61177281611c87565b82525050565b61178181611c39565b82525050565b61179081611c39565b82525050565b60006117a182611b76565b6117ab8185611bbd565b93506117bb818560208601611cba565b6117c481611ced565b840191505092915050565b60006117da82611b76565b6117e48185611bce565b93506117f4818560208601611cba565b6117fd81611ced565b840191505092915050565b6000611815600483611bce565b91507f6e616d65000000000000000000000000000000000000000000000000000000006000830152602082019050919050565b6000611855600983611bce565b91507f6974656d5f6e616d6500000000000000000000000000000000000000000000006000830152602082019050919050565b6000611895600783611bce565b91507f6974656d5f6964000000000000000000000000000000000000000000000000006000830152602082019050919050565b600060608201905081810360008301526118e281866116e5565b905081810360208301526118f68185611687565b9050818103604083015261190a81846116e5565b9050949350505050565b60006020820190506119296000830184611787565b92915050565b6000602082019050818103600083015261194981846117cf565b905092915050565b6000604082019050818103600083015261196b81856117cf565b905061197a602083018461175a565b9392505050565b6000604082019050818103600083015261199b81856117cf565b90506119aa6020830184611769565b9392505050565b600060608201905081810360008301526119cb81866117cf565b90506119da6020830185611769565b6119e7604083018461175a565b949350505050565b60006020820190508181036000830152611a0881611808565b9050919050565b60006040820190508181036000830152611a2881611808565b90508181036020830152611a3c81846117cf565b905092915050565b60006020820190508181036000830152611a5d81611848565b9050919050565b60006040820190508181036000830152611a7d81611848565b90508181036020830152611a9181846117cf565b905092915050565b60006020820190508181036000830152611ab281611888565b9050919050565b60006040820190508181036000830152611ad281611888565b9050611ae16020830184611787565b92915050565b6000604051905081810181811067ffffffffffffffff82111715611b0a57600080fd5b8060405250919050565b600067ffffffffffffffff821115611b2b57600080fd5b601f19601f8301169050602081019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b6000611bea82611c43565b9050919050565b6000611bfc82611bdf565b9050919050565b6000611c0e82611bdf565b9050919050565b6000611c2082611bdf565b9050919050565b6000611c3282611bdf565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611c6e82611c75565b9050919050565b6000611c8082611c43565b9050919050565b6000611c9282611c99565b9050919050565b6000611ca482611c43565b9050919050565b82818337600083830152505050565b60005b83811015611cd8578082015181840152602081","019050611cbd565b83811115611ce7576000848401525b50505050565b6000601f19601f8301169050919050565b611d0781611bf1565b8114611d1257600080fd5b50565b611d1e81611c03565b8114611d2957600080fd5b50565b611d3581611c15565b8114611d4057600080fd5b50565b611d4c81611c27565b8114611d5757600080fd5b50565b611d6381611c39565b8114611d6e57600080fd5b5056fea26469706673582212204a51d3f1e72349b64c6dbc99732990967116a011b84b75822c117b6c7b6edb5164736f6c634300060a0033"};

    public static final String BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {"60806040523480156200001157600080fd5b506110016000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c92a78016040518060400160405280600681526020017f745f7465737400000000000000000000000000000000000000000000000000008152506040518263ffffffff1660e01b8152600401620000e591906200024a565b602060405180830381600087803b1580156200010057600080fd5b505af115801562000115573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200013b919062000159565b506200031f565b600081519050620001538162000305565b92915050565b6000602082840312156200016c57600080fd5b60006200017c8482850162000142565b91505092915050565b6000620001928262000298565b6200019e8185620002a3565b9350620001b0818560208601620002be565b620001bb81620002f4565b840191505092915050565b6000620001d5601183620002a3565b91507f6974656d5f69642c6974656d5f6e616d650000000000000000000000000000006000830152602082019050919050565b600062000217600483620002a3565b91507f6e616d65000000000000000000000000000000000000000000000000000000006000830152602082019050919050565b6000606082019050818103600083015262000266818462000185565b905081810360208301526200027b8162000208565b905081810360408301526200029081620001c6565b905092915050565b600081519050919050565b600082825260208201905092915050565b6000819050919050565b60005b83811015620002de578082015181840152602081019050620002c1565b83811115620002ee576000848401525b50505050565b6000601f19601f8301169050919050565b6200031081620002b4565b81146200031c57600080fd5b50565b611da7806200032f6000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80630fe1160f1461005157806349cc36b5146100815780635b325d78146100b1578063e020d464146100e3575b600080fd5b61006b60048036038101906100669190611588565b610113565b6040516100789190611914565b60405180910390f35b61009b600480360381019061009691906115dc565b61041f565b6040516100a89190611914565b60405180910390f35b6100cb60048036038101906100c69190611506565b61081c565b6040516100da939291906118c8565b60405180910390f35b6100fd60048036038101906100f891906115dc565b610f97565b60405161010a9190611914565b60405180910390f35b6000806000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166359a48b656040518060400160405280600681526020017f745f7465737400000000000000000000000000000000000000000000000000008152506040518263ffffffff1660e01b81526004016101a5919061192f565b60206040518083038186803b1580156101bd57600080fd5b505afa1580156101d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101f591906114b4565b905060008173ffffffffffffffffffffffffffffffffffffffff1663c74f8caf6040518163ffffffff1660e01b815260040160206040518083038186803b15801561023f57600080fd5b505afa158015610253573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102779190611439565b90508073ffffffffffffffffffffffffffffffffffffffff1663ae763db5866040518263ffffffff1660e01b81526004016102b29190611ab2565b60006040518083038186803b1580156102ca57600080fd5b505afa1580156102de573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff1663d62b54b4856040518263ffffffff1660e01b815260040161031b9190611a0f565b60006040518083038186803b15801561033357600080fd5b505afa158015610347573d6000803e3d6000fd5b5050505060008273ffffffffffffffffffffffffffffffffffffffff166309ff42f087846040518363ffffffff1660e01b8152600401610388929190611951565b602060405180830381600087803b1580156103a257600080fd5b505af11580156103b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103da91906114dd565b90507fe7769b56c2afa8e40381956f76b91d9ec19c34c0a81791702fdcae68e35a72718160405161040b9190611914565b60405180910390a180935050505092915050565b6000806000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166359a48b656040518060400160405280600681526020017f745f7465737400000000000000000000000000000000000000000000000000008152506040518263ffffffff1660e01b81526004016104b1919061192f565b60206040518083038186803b1580156104c957600080fd5b505afa1580156104dd573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061050191906114b4565b905060008173ffffffffffffffffffffffffffffffffffffffff16635887ab246040518163ffffffff1660e01b815260040160206040518083038186803b15801561054b57600080fd5b505afa15801561055f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610583919061148b565b90508073ffffffffffffffffffffffffffffffffffffffff16631a391cb4856040518263ffffffff1660e01b81526004016105be9190611a5d565b600060405180830381600087803b1580156105d857600080fd5b505af11580156105ec573d6000803e3d6000fd5b5050505060008273ffffffffffffffffffffffffffffffffffffffff1663c74f8caf6040518163ffffffff1660e01b815260040160206040518083038186803b15801561063857600080fd5b505afa15801561064c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106709190611439565b90508073ffffffffffffffffffffffffffffffffffffffff1663ae763db5886040518263ffffffff1660e01b81526004016106ab9190611ab2565b60006040518083038186803b1580156106c357600080fd5b505afa1580156106d7573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff1663d62b54b4876040518263ffffffff1660e01b81526004016107149190611a0f565b60006040518083038186803b15801561072c57600080fd5b505afa158015610740573d6000803e3d6000fd5b5050505060008373ffffffffffffffffffffffffffffffffffffffff1663664b37d68985856040518463ffffffff1660e01b8152600401610783939291906119b1565b602060405180830381600087803b15801561079d57600080fd5b505af11580156107b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107d591906114dd565b90507fd72ab475a08df05fbd4f7f8cb4db1ad9dbdc26f54437fa6794acd97357779d2a816040516108069190611914565b60405180910390a1809450505050509392505050565b606080606060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166359a48b656040518060400160405280600681526020017f745f7465737400000000000000000000000000000000000000000000000000008152506040518263ffffffff1660e01b81526004016108b2919061192f565b60206040518083038186803b1580156108ca57600080fd5b505afa1580156108de573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061090291906114b4565b905060008173ffffffffffffffffffffffffffffffffffffffff1663c74f8caf6040518163ffffffff1660e01b815260040160206040518083038186803b15801561094c57600080fd5b505afa158015610960573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109849190611439565b905060008273ffffffffffffffffffffffffffffffffffffffff1663d8ac595788846040518363ffffffff1660e01b81526004016109c3929190611951565b60206040518083038186803b1580156109db57600080fd5b505afa1580156109ef573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a139190611462565b905060608173ffffffffffffffffffffffffffffffffffffffff1663d3e9af5a6040518163ffffffff1660e01b815260040160206040518083038186803b158015610a5d57600080fd5b505afa158015610a71573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a9591906114dd565b67ffffffffffffffff81118015610aab57600080fd5b50604051908082528060200260200182016040528015610adf57816020015b6060815260200190600190039081610aca5790505b50905060608273ffffffffffffffffffffffffffffffffffffffff1663d3e9af5a6040518163ffffffff1660e01b815260040160206040518083038186803b158015610b2a57600080fd5b505afa158015610b3e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b6291906114dd565b67ffffffffffffffff81118015610b7857600080fd5b50604051908082528060200260200182016040528015610ba75781602001602082028036833780820191505090505b50905060608373ffffffffffffffffffffffffffffffffffffffff1663d3e9af5a6040518163ffffffff1660e01b815260040160206040518083038186803b158015610bf257600080fd5b505afa158015610c06573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c2a91906114dd565b67ffffffffffffffff81118015610c4057600080fd5b50604051908082528060200260200182016040528015610c7457816020015b6060815260200190600190039081610c5f5790505b50905060008090505b8473ffffffffffffffffffffffffffffffffffffffff1663d3e9af5a6040518163ffffffff1660e01b815260040160206040518083038186803b158015610cc357600080fd5b505afa158015610cd7573d6000","803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cfb91906114dd565b811215610f805760008573ffffffffffffffffffffffffffffffffffffffff16633dd2b614836040518263ffffffff1660e01b8152600401610d3d9190611914565b60206040518083038186803b158015610d5557600080fd5b505afa158015610d69573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d8d919061148b565b90508073ffffffffffffffffffffffffffffffffffffffff16639bca41e86040518163ffffffff1660e01b8152600401610dc690611a92565b60006040518083038186803b158015610dde57600080fd5b505afa158015610df2573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610e1b9190611547565b858381518110610e2757fe5b60200260200101819052508073ffffffffffffffffffffffffffffffffffffffff16634900862e6040518163ffffffff1660e01b8152600401610e69906119ef565b60206040518083038186803b158015610e8157600080fd5b505afa158015610e95573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eb991906114dd565b848381518110610ec557fe5b6020026020010181815250508073ffffffffffffffffffffffffffffffffffffffff16639bca41e86040518163ffffffff1660e01b8152600401610f0890611a3d565b60006040518083038186803b158015610f2057600080fd5b505afa158015610f34573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610f5d9190611547565b838381518110610f6957fe5b602002602001018190525050806001019050610c7d565b508282829850985098505050505050509193909250565b6000806000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166359a48b656040518060400160405280600681526020017f745f7465737400000000000000000000000000000000000000000000000000008152506040518263ffffffff1660e01b8152600401611029919061192f565b60206040518083038186803b15801561104157600080fd5b505afa158015611055573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061107991906114b4565b905060008173ffffffffffffffffffffffffffffffffffffffff16635887ab246040518163ffffffff1660e01b815260040160206040518083038186803b1580156110c357600080fd5b505afa1580156110d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110fb919061148b565b90508073ffffffffffffffffffffffffffffffffffffffff16631a391cb4876040518263ffffffff1660e01b81526004016111369190611ab2565b600060405180830381600087803b15801561115057600080fd5b505af1158015611164573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff1663def42698866040518263ffffffff1660e01b81526004016111a19190611a0f565b600060405180830381600087803b1580156111bb57600080fd5b505af11580156111cf573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16631a391cb4856040518263ffffffff1660e01b815260040161120c9190611a5d565b600060405180830381600087803b15801561122657600080fd5b505af115801561123a573d6000803e3d6000fd5b5050505060008273ffffffffffffffffffffffffffffffffffffffff16634c6f30c088846040518363ffffffff1660e01b815260040161127b929190611981565b602060405180830381600087803b15801561129557600080fd5b505af11580156112a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112cd91906114dd565b90507fdfc533ec2b52797a1229dc2495dbd3f4948f7c4c982ec077ad9d80810ec5c1f9816040516112fe9190611914565b60405180910390a18093505050509392505050565b60008151905061132281611cfe565b92915050565b60008151905061133781611d15565b92915050565b60008151905061134c81611d2c565b92915050565b60008151905061136181611d43565b92915050565b60008135905061137681611d5a565b92915050565b60008151905061138b81611d5a565b92915050565b600082601f8301126113a257600080fd5b81356113b56113b082611b14565b611ae7565b915080825260208301602083018583830111156113d157600080fd5b6113dc838284611cab565b50505092915050565b600082601f8301126113f657600080fd5b815161140961140482611b14565b611ae7565b9150808252602083016020830185838301111561142557600080fd5b611430838284611cba565b50505092915050565b60006020828403121561144b57600080fd5b600061145984828501611313565b91505092915050565b60006020828403121561147457600080fd5b600061148284828501611328565b91505092915050565b60006020828403121561149d57600080fd5b60006114ab8482850161133d565b91505092915050565b6000602082840312156114c657600080fd5b60006114d484828501611352565b91505092915050565b6000602082840312156114ef57600080fd5b60006114fd8482850161137c565b91505092915050565b60006020828403121561151857600080fd5b600082013567ffffffffffffffff81111561153257600080fd5b61153e84828501611391565b91505092915050565b60006020828403121561155957600080fd5b600082015167ffffffffffffffff81111561157357600080fd5b61157f848285016113e5565b91505092915050565b6000806040838503121561159b57600080fd5b600083013567ffffffffffffffff8111156115b557600080fd5b6115c185828601611391565b92505060206115d285828601611367565b9150509250929050565b6000806000606084860312156115f157600080fd5b600084013567ffffffffffffffff81111561160b57600080fd5b61161786828701611391565b935050602061162886828701611367565b925050604084013567ffffffffffffffff81111561164557600080fd5b61165186828701611391565b9150509250925092565b60006116678383611778565b60208301905092915050565b600061167f8383611796565b905092915050565b600061169282611b60565b61169c8185611b9b565b93506116a783611b40565b8060005b838110156116d85781516116bf888261165b565b97506116ca83611b81565b9250506001810190506116ab565b5085935050505092915050565b60006116f082611b6b565b6116fa8185611bac565b93508360208202850161170c85611b50565b8060005b8581101561174857848403895281516117298582611673565b945061173483611b8e565b925060208a01995050600181019050611710565b50829750879550505050505092915050565b61176381611c63565b82525050565b61177281611c87565b82525050565b61178181611c39565b82525050565b61179081611c39565b82525050565b60006117a182611b76565b6117ab8185611bbd565b93506117bb818560208601611cba565b6117c481611ced565b840191505092915050565b60006117da82611b76565b6117e48185611bce565b93506117f4818560208601611cba565b6117fd81611ced565b840191505092915050565b6000611815600783611bce565b91507f6974656d5f6964000000000000000000000000000000000000000000000000006000830152602082019050919050565b6000611855600983611bce565b91507f6974656d5f6e616d6500000000000000000000000000000000000000000000006000830152602082019050919050565b6000611895600483611bce565b91507f6e616d65000000000000000000000000000000000000000000000000000000006000830152602082019050919050565b600060608201905081810360008301526118e281866116e5565b905081810360208301526118f68185611687565b9050818103604083015261190a81846116e5565b9050949350505050565b60006020820190506119296000830184611787565b92915050565b6000602082019050818103600083015261194981846117cf565b905092915050565b6000604082019050818103600083015261196b81856117cf565b905061197a602083018461175a565b9392505050565b6000604082019050818103600083015261199b81856117cf565b90506119aa6020830184611769565b9392505050565b600060608201905081810360008301526119cb81866117cf565b90506119da6020830185611769565b6119e7604083018461175a565b949350505050565b60006020820190508181036000830152611a0881611808565b9050919050565b60006040820190508181036000830152611a2881611808565b9050611a376020830184611787565b92915050565b60006020820190508181036000830152611a5681611848565b9050919050565b60006040820190508181036000830152611a7681611848565b90508181036020830152611a8a81846117cf565b905092915050565b60006020820190508181036000830152611aab81611888565b9050919050565b60006040820190508181036000830152611acb81611888565b90508181036020830152611adf81846117cf565b905092915050565b6000604051905081810181811067ffffffffffffffff82111715611b0a57600080fd5b8060405250919050565b600067ffffffffffffffff821115611b2b57600080fd5b601f19601f8301169050602081019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b6000611bea82611c43565b9050919050565b6000611bfc82611bdf565b9050919050565b6000611c0e82611bdf565b9050919050565b6000611c2082611bdf565b9050919050565b6000611c3282611bdf565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611c6e82611c75565b9050919050565b6000611c8082611c43565b9050919050565b6000611c9282611c99565b9050919050565b6000611ca482611c43565b9050919050565b82818337600083830152505050565b60005b83811015611cd8578082015181840152602081","019050611cbd565b83811115611ce7576000848401525b50505050565b6000601f19601f8301169050919050565b611d0781611bf1565b8114611d1257600080fd5b50565b611d1e81611c03565b8114611d2957600080fd5b50565b611d3581611c15565b8114611d4057600080fd5b50565b611d4c81611c27565b8114611d5757600080fd5b50565b611d6381611c39565b8114611d6e57600080fd5b5056fea2646970667358221220ed3dd59baecbc2439756bfba8fa0af6560f86d8f2cd64504de6a9aa5496fa76d64736f6c634300060a0033"};

    public static final String SM_BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"count\",\"type\":\"int256\"}],\"name\":\"CreateResult\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"count\",\"type\":\"int256\"}],\"name\":\"InsertResult\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"count\",\"type\":\"int256\"}],\"name\":\"RemoveResult\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"count\",\"type\":\"int256\"}],\"name\":\"UpdateResult\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"int256\",\"name\":\"item_id\",\"type\":\"int256\"},{\"internalType\":\"string\",\"name\":\"item_name\",\"type\":\"string\"}],\"name\":\"insert\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"int256\",\"name\":\"item_id\",\"type\":\"int256\"}],\"name\":\"remove\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"select\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"},{\"internalType\":\"int256[]\",\"name\":\"\",\"type\":\"int256[]\"},{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"int256\",\"name\":\"item_id\",\"type\":\"int256\"},{\"internalType\":\"string\",\"name\":\"item_name\",\"type\":\"string\"}],\"name\":\"update\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"};

    public static final String ABI = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", ABI_ARRAY);

    public static final String FUNC_INSERT = "insert";

    public static final String FUNC_REMOVE = "remove";

    public static final String FUNC_SELECT = "select";

    public static final String FUNC_UPDATE = "update";

    public static final Event CREATERESULT_EVENT = new Event("CreateResult", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
    ;

    public static final Event INSERTRESULT_EVENT = new Event("InsertResult", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
    ;

    public static final Event REMOVERESULT_EVENT = new Event("RemoveResult", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
    ;

    public static final Event UPDATERESULT_EVENT = new Event("UpdateResult", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
    ;

    protected TableTest(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public List<CreateResultEventResponse> getCreateResultEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(CREATERESULT_EVENT, transactionReceipt);
        ArrayList<CreateResultEventResponse> responses = new ArrayList<CreateResultEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            CreateResultEventResponse typedResponse = new CreateResultEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.count = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeCreateResultEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(CREATERESULT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeCreateResultEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(CREATERESULT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<InsertResultEventResponse> getInsertResultEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(INSERTRESULT_EVENT, transactionReceipt);
        ArrayList<InsertResultEventResponse> responses = new ArrayList<InsertResultEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            InsertResultEventResponse typedResponse = new InsertResultEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.count = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeInsertResultEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(INSERTRESULT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeInsertResultEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(INSERTRESULT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<RemoveResultEventResponse> getRemoveResultEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(REMOVERESULT_EVENT, transactionReceipt);
        ArrayList<RemoveResultEventResponse> responses = new ArrayList<RemoveResultEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RemoveResultEventResponse typedResponse = new RemoveResultEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.count = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeRemoveResultEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(REMOVERESULT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeRemoveResultEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(REMOVERESULT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<UpdateResultEventResponse> getUpdateResultEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(UPDATERESULT_EVENT, transactionReceipt);
        ArrayList<UpdateResultEventResponse> responses = new ArrayList<UpdateResultEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            UpdateResultEventResponse typedResponse = new UpdateResultEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.count = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeUpdateResultEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(UPDATERESULT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeUpdateResultEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(UPDATERESULT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public TransactionReceipt insert(String name, BigInteger item_id, String item_name) {
        final Function function = new Function(
                FUNC_INSERT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(name), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(item_id), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(item_name)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void insert(String name, BigInteger item_id, String item_name, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_INSERT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(name), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(item_id), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(item_name)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForInsert(String name, BigInteger item_id, String item_name) {
        final Function function = new Function(
                FUNC_INSERT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(name), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(item_id), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(item_name)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, BigInteger, String> getInsertInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_INSERT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Int256>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, BigInteger, String>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue(), 
                (String) results.get(2).getValue()
                );
    }

    public Tuple1<BigInteger> getInsertOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_INSERT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public TransactionReceipt remove(String name, BigInteger item_id) {
        final Function function = new Function(
                FUNC_REMOVE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(name), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(item_id)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void remove(String name, BigInteger item_id, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_REMOVE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(name), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(item_id)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForRemove(String name, BigInteger item_id) {
        final Function function = new Function(
                FUNC_REMOVE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(name), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(item_id)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, BigInteger> getRemoveInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_REMOVE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, BigInteger>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue()
                );
    }

    public Tuple1<BigInteger> getRemoveOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_REMOVE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public Tuple3<List<String>, List<BigInteger>, List<String>> select(String name) throws ContractException {
        final Function function = new Function(FUNC_SELECT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(name)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Utf8String>>() {}, new TypeReference<DynamicArray<Int256>>() {}, new TypeReference<DynamicArray<Utf8String>>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple3<List<String>, List<BigInteger>, List<String>>(
                convertToNative((List<Utf8String>) results.get(0).getValue()), 
                convertToNative((List<Int256>) results.get(1).getValue()), 
                convertToNative((List<Utf8String>) results.get(2).getValue()));
    }

    public TransactionReceipt update(String name, BigInteger item_id, String item_name) {
        final Function function = new Function(
                FUNC_UPDATE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(name), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(item_id), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(item_name)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void update(String name, BigInteger item_id, String item_name, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_UPDATE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(name), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(item_id), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(item_name)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForUpdate(String name, BigInteger item_id, String item_name) {
        final Function function = new Function(
                FUNC_UPDATE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(name), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(item_id), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(item_name)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, BigInteger, String> getUpdateInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_UPDATE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Int256>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, BigInteger, String>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue(), 
                (String) results.get(2).getValue()
                );
    }

    public Tuple1<BigInteger> getUpdateOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_UPDATE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public static TableTest load(String contractAddress, Client client, CryptoKeyPair credential) {
        return new TableTest(contractAddress, client, credential);
    }

    public static TableTest deploy(Client client, CryptoKeyPair credential) throws ContractException {
        return deploy(TableTest.class, client, credential, getBinary(client.getCryptoSuite()), "");
    }

    public static class CreateResultEventResponse {
        public TransactionReceipt.Logs log;

        public BigInteger count;
    }

    public static class InsertResultEventResponse {
        public TransactionReceipt.Logs log;

        public BigInteger count;
    }

    public static class RemoveResultEventResponse {
        public TransactionReceipt.Logs log;

        public BigInteger count;
    }

    public static class UpdateResultEventResponse {
        public TransactionReceipt.Logs log;

        public BigInteger count;
    }
}
