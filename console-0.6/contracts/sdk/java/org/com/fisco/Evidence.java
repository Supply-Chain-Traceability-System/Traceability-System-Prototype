package org.com.fisco;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.sdk.abi.FunctionReturnDecoder;
import org.fisco.bcos.sdk.abi.TypeReference;
import org.fisco.bcos.sdk.abi.datatypes.Function;
import org.fisco.bcos.sdk.abi.datatypes.Type;
import org.fisco.bcos.sdk.abi.datatypes.Utf8String;
import org.fisco.bcos.sdk.abi.datatypes.generated.Uint256;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple1;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple3;
import org.fisco.bcos.sdk.client.Client;
import org.fisco.bcos.sdk.contract.Contract;
import org.fisco.bcos.sdk.crypto.CryptoSuite;
import org.fisco.bcos.sdk.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.model.CryptoType;
import org.fisco.bcos.sdk.model.TransactionReceipt;
import org.fisco.bcos.sdk.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.transaction.model.exception.ContractException;

@SuppressWarnings("unchecked")
public class Evidence extends Contract {
    public static final String[] BINARY_ARRAY = {"608060405234801561001057600080fd5b5061094e806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806307f71a591461003b5780639027696b14610197575b600080fd5b6101956004803603606081101561005157600080fd5b810190808035906020019064010000000081111561006e57600080fd5b82018360208201111561008057600080fd5b803590602001918460018302840111640100000000831117156100a257600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192908035906020019064010000000081111561010557600080fd5b82018360208201111561011757600080fd5b8035906020019184600183028401116401000000008311171561013957600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290803590602001909291905050506103a3565b005b610250600480360360208110156101ad57600080fd5b81019080803590602001906401000000008111156101ca57600080fd5b8201836020820111156101dc57600080fd5b803590602001918460018302840111640100000000831117156101fe57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050919291929050505061054a565b60405180806020018060200180602001848103845287818151815260200191508051906020019080838360005b8381101561029857808201518184015260208101905061027d565b50505050905090810190601f1680156102c55780820380516001836020036101000a031916815260200191505b50848103835286818151815260200191508051906020019080838360005b838110156102fe5780820151818401526020810190506102e3565b50505050905090810190601f16801561032b5780820380516001836020036101000a031916815260200191505b50848103825285818151815260200191508051906020019080838360005b83811015610364578082015181840152602081019050610349565b50505050905090810190601f1680156103915780820380516001836020036101000a031916815260200191505b50965050505050505060405180910390f35b600181141561042f57816000846040518082805190602001908083835b602083106103e357805182526020820191506020810190506020830392506103c0565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390209080519060200190610429929190610873565b50610545565b60028114156104bb57816001846040518082805190602001908083835b6020831061046f578051825260208201915060208101905060208303925061044c565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902090805190602001906104b5929190610873565b50610544565b600381141561054357816002846040518082805190602001908083835b602083106104fb57805182526020820191506020810190506020830392506104d8565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390209080519060200190610541929190610873565b505b5b5b505050565b6060806060806000856040518082805190602001908083835b602083106105865780518252602082019150602081019050602083039250610563565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390208054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561064d5780601f106106225761010080835404028352916020019161064d565b820191906000526020600020905b81548152906001019060200180831161063057829003601f168201915b5050505050905060606001866040518082805190602001908083835b6020831061068c5780518252602082019150602081019050602083039250610669565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390208054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156107535780601f1061072857610100808354040283529160200191610753565b820191906000526020600020905b81548152906001019060200180831161073657829003601f168201915b5050505050905060606002876040518082805190602001908083835b60208310610792578051825260208201915060208101905060208303925061076f565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390208054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156108595780601f1061082e57610100808354040283529160200191610859565b820191906000526020600020905b81548152906001019060200180831161083c57829003601f168201915b505050505090508282829550955095505050509193909250565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106108b457805160ff19168380011785556108e2565b828001600101855582156108e2579182015b828111156108e15782518255916020019190600101906108c6565b5b5090506108ef91906108f3565b5090565b61091591905b808211156109115760008160009055506001016108f9565b5090565b9056fea2646970667358221220365aaafbdd4387667411ea9cb7fccc09bcec93999678e5772deaab8847dd430364736f6c634300060a0033"};

    public static final String BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {"608060405234801561001057600080fd5b5061094e806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80632a8cf81c1461003b57806385f59ad014610197575b600080fd5b6101956004803603606081101561005157600080fd5b810190808035906020019064010000000081111561006e57600080fd5b82018360208201111561008057600080fd5b803590602001918460018302840111640100000000831117156100a257600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192908035906020019064010000000081111561010557600080fd5b82018360208201111561011757600080fd5b8035906020019184600183028401116401000000008311171561013957600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290803590602001909291905050506103a3565b005b610250600480360360208110156101ad57600080fd5b81019080803590602001906401000000008111156101ca57600080fd5b8201836020820111156101dc57600080fd5b803590602001918460018302840111640100000000831117156101fe57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050919291929050505061054a565b60405180806020018060200180602001848103845287818151815260200191508051906020019080838360005b8381101561029857808201518184015260208101905061027d565b50505050905090810190601f1680156102c55780820380516001836020036101000a031916815260200191505b50848103835286818151815260200191508051906020019080838360005b838110156102fe5780820151818401526020810190506102e3565b50505050905090810190601f16801561032b5780820380516001836020036101000a031916815260200191505b50848103825285818151815260200191508051906020019080838360005b83811015610364578082015181840152602081019050610349565b50505050905090810190601f1680156103915780820380516001836020036101000a031916815260200191505b50965050505050505060405180910390f35b600181141561042f57816000846040518082805190602001908083835b602083106103e357805182526020820191506020810190506020830392506103c0565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390209080519060200190610429929190610873565b50610545565b60028114156104bb57816001846040518082805190602001908083835b6020831061046f578051825260208201915060208101905060208303925061044c565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902090805190602001906104b5929190610873565b50610544565b600381141561054357816002846040518082805190602001908083835b602083106104fb57805182526020820191506020810190506020830392506104d8565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390209080519060200190610541929190610873565b505b5b5b505050565b6060806060806000856040518082805190602001908083835b602083106105865780518252602082019150602081019050602083039250610563565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390208054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561064d5780601f106106225761010080835404028352916020019161064d565b820191906000526020600020905b81548152906001019060200180831161063057829003601f168201915b5050505050905060606001866040518082805190602001908083835b6020831061068c5780518252602082019150602081019050602083039250610669565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390208054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156107535780601f1061072857610100808354040283529160200191610753565b820191906000526020600020905b81548152906001019060200180831161073657829003601f168201915b5050505050905060606002876040518082805190602001908083835b60208310610792578051825260208201915060208101905060208303925061076f565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390208054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156108595780601f1061082e57610100808354040283529160200191610859565b820191906000526020600020905b81548152906001019060200180831161083c57829003601f168201915b505050505090508282829550955095505050509193909250565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106108b457805160ff19168380011785556108e2565b828001600101855582156108e2579182015b828111156108e15782518255916020019190600101906108c6565b5b5090506108ef91906108f3565b5090565b61091591905b808211156109115760008160009055506001016108f9565b5090565b9056fea26469706673582212206380afcb0a848682aa1749a6a918fb82a4ae7e8d8cf1f7cb5dd6c367a13023e164736f6c634300060a0033"};

    public static final String SM_BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"id\",\"type\":\"string\"}],\"name\":\"queryData\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"id\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"data\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_type\",\"type\":\"uint256\"}],\"name\":\"saveData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"};

    public static final String ABI = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", ABI_ARRAY);

    public static final String FUNC_QUERYDATA = "queryData";

    public static final String FUNC_SAVEDATA = "saveData";

    protected Evidence(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public TransactionReceipt queryData(String id) {
        final Function function = new Function(
                FUNC_QUERYDATA, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(id)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void queryData(String id, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_QUERYDATA, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(id)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForQueryData(String id) {
        final Function function = new Function(
                FUNC_QUERYDATA, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(id)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getQueryDataInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_QUERYDATA, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public Tuple3<String, String, String> getQueryDataOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_QUERYDATA, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (String) results.get(2).getValue()
                );
    }

    public TransactionReceipt saveData(String id, String data, BigInteger _type) {
        final Function function = new Function(
                FUNC_SAVEDATA, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(id), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(data), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_type)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void saveData(String id, String data, BigInteger _type, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SAVEDATA, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(id), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(data), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_type)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSaveData(String id, String data, BigInteger _type) {
        final Function function = new Function(
                FUNC_SAVEDATA, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(id), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(data), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_type)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, String, BigInteger> getSaveDataInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SAVEDATA, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, String, BigInteger>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue()
                );
    }

    public static Evidence load(String contractAddress, Client client, CryptoKeyPair credential) {
        return new Evidence(contractAddress, client, credential);
    }

    public static Evidence deploy(Client client, CryptoKeyPair credential) throws ContractException {
        return deploy(Evidence.class, client, credential, getBinary(client.getCryptoSuite()), "");
    }
}
