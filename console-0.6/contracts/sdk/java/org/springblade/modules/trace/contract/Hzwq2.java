package org.springblade.modules.trace.contract;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.sdk.abi.FunctionReturnDecoder;
import org.fisco.bcos.sdk.abi.TypeReference;
import org.fisco.bcos.sdk.abi.datatypes.Bool;
import org.fisco.bcos.sdk.abi.datatypes.Function;
import org.fisco.bcos.sdk.abi.datatypes.Type;
import org.fisco.bcos.sdk.abi.datatypes.Utf8String;
import org.fisco.bcos.sdk.abi.datatypes.generated.Int256;
import org.fisco.bcos.sdk.abi.datatypes.generated.Uint256;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple1;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple2;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple3;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple5;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple6;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple7;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple8;
import org.fisco.bcos.sdk.client.Client;
import org.fisco.bcos.sdk.contract.Contract;
import org.fisco.bcos.sdk.crypto.CryptoSuite;
import org.fisco.bcos.sdk.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.model.CryptoType;
import org.fisco.bcos.sdk.model.TransactionReceipt;
import org.fisco.bcos.sdk.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.transaction.model.exception.ContractException;

@SuppressWarnings("unchecked")
public class Hzwq2 extends Contract {
    public static final String[] BINARY_ARRAY = {"","","880314612011576000806040518060600160405280602381526020016121de602391399080905092509250925061208f565b61204b565b848687031461204a57600080604051806060016040528060238152602001612228602391399080905092509250925061208f565b5b6001806040518060400160405280600c81526020017fe5aea1e6a0b8e68890e58a9f0000000000000000000000000000000000000000815250908090509250925092505b955095509592505050565b6000606060006120df846040518060400160405280600781526020017f636572745f696400000000000000000000000000000000000000000000000000815250611c76565b61212b576000806040518060400160405280601681526020017f636572745f6964e5ad97e6aeb5e4b88de5ad98e59ca8000000000000000000008152509080905092509250925061216f565b6001806040518060400160405280600c81526020017fe5aea1e6a0b8e68890e58a9f0000000000000000000000000000000000000000815250908090509250925092505b919390925056fee697a5e8aea1e697b6e8afafe5b7aee8afafe5b7aee99990e4b88de59088e6a0bce6a380e69fa5e697b6e9929fe7a4bae580bce8afafe5b7aee4b88de59088e6a0bc6131e6a380e69fa5e697b6e9929fe7a4bae580bce8afafe5b7aee4b88de59088e6a0bc6132e6a380e69fa5e697b6e9929fe7a4bae580bce8afafe5b7aee4b88de59088e6a0bc6231e5a496e8a782e38081e6a087e5bf97e58f8ae9809ae794b5e6a380e69fa5e4b88de59088e6a0bce6a380e69fa5e697b6e9929fe7a4bae580bce8afafe5b7aee4b88de59088e6a0bc6232a264697066735822122040b6f4978a50dea2d8f441c50be78d77d16d5f7a99240f8099ead01ff5b8e04564736f6c634300060a0033"};

    public static final String BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {"","","ffffffffffffffffffffffffffffffffffffffffffffd88912156120285760008060405180606001604052806021815260200161222a602191399080905092509250925061216a565b61019088131561205d57600080604051806060016040528060238152602001612177602391399080905092509250925061216a565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe708812156120b057600080604051806060016040528060238152602001612207602391399080905092509250925061216a565b858711156120f15784868803146120ec576000806040518060600160405280602381526020016121bd602391399080905092509250925061216a565b612126565b84868703146121255760008060405180606001604052806023815260200161219a602391399080905092509250925061216a565b5b6001806040518060400160405280600c81526020017fe5aea1e6a0b8e68890e58a9f0000000000000000000000000000000000000000815250908090509250925092505b9650965096935050505056fee6a380e69fa5e697b6e9929fe7a4bae580bce8afafe5b7aee4b88de59088e6a0bc6131e6a380e69fa5e697b6e9929fe7a4bae580bce8afafe5b7aee4b88de59088e6a0bc6232e6a380e69fa5e697b6e9929fe7a4bae580bce8afafe5b7aee4b88de59088e6a0bc6231e5a496e8a782e38081e6a087e5bf97e58f8ae9809ae794b5e6a380e69fa5e4b88de59088e6a0bce6a380e69fa5e697b6e9929fe7a4bae580bce8afafe5b7aee4b88de59088e6a0bc6132e697a5e8aea1e697b6e8afafe5b7aee8afafe5b7aee99990e4b88de59088e6a0bca26469706673582212202b28e59e07149f47b969f550f0a9b2fba4dbfb9360aa9d70086240c5ca109bf364736f6c634300060a0033"};

    public static final String SM_BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"_x\",\"type\":\"int256\"}],\"name\":\"abs\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_source\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_pattern\",\"type\":\"string\"}],\"name\":\"checkStr\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_json\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"conc_code\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"volt_conc_code\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"intuit_conc_code\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"starting_conc_code\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"creeping_conc_code\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"const_conc_code\",\"type\":\"string\"}],\"name\":\"examine1\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"dayerr_conc_code\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"clock_error\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"met_value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"std_value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"time_err\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"clock_conc\",\"type\":\"string\"}],\"name\":\"examine2\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_json\",\"type\":\"string\"}],\"name\":\"examine_1\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"conc_code\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"volt_conc_code\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"intuit_conc_code\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"starting_conc_code\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"creeping_conc_code\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"const_conc_code\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"base_err_code\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"need_err_code\",\"type\":\"string\"}],\"name\":\"examine_2\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"dayerr_conc_code\",\"type\":\"int256\"}],\"name\":\"examine_4\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"clock_error\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"met_value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"std_value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"time_err\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"clock_conc\",\"type\":\"string\"}],\"name\":\"examine_5\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_a\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_b\",\"type\":\"string\"}],\"name\":\"hashCompareInternal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]"};

    public static final String ABI = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", ABI_ARRAY);

    public static final String FUNC_ABS = "abs";

    public static final String FUNC_CHECKSTR = "checkStr";

    public static final String FUNC_EXAMINE1 = "examine1";

    public static final String FUNC_EXAMINE2 = "examine2";

    public static final String FUNC_EXAMINE_1 = "examine_1";

    public static final String FUNC_EXAMINE_2 = "examine_2";

    public static final String FUNC_EXAMINE_4 = "examine_4";

    public static final String FUNC_EXAMINE_5 = "examine_5";

    public static final String FUNC_HASHCOMPAREINTERNAL = "hashCompareInternal";

    protected Hzwq2(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public TransactionReceipt abs(BigInteger _x) {
        final Function function = new Function(
                FUNC_ABS, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(_x)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void abs(BigInteger _x, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ABS, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(_x)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForAbs(BigInteger _x) {
        final Function function = new Function(
                FUNC_ABS, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(_x)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<BigInteger> getAbsInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ABS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public Tuple1<BigInteger> getAbsOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_ABS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public TransactionReceipt checkStr(String _source, String _pattern) {
        final Function function = new Function(
                FUNC_CHECKSTR, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_source), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_pattern)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void checkStr(String _source, String _pattern, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_CHECKSTR, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_source), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_pattern)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForCheckStr(String _source, String _pattern) {
        final Function function = new Function(
                FUNC_CHECKSTR, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_source), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_pattern)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, String> getCheckStrInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_CHECKSTR, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue()
                );
    }

    public Tuple1<Boolean> getCheckStrOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_CHECKSTR, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public TransactionReceipt examine1(String _json, String conc_code, String volt_conc_code, String intuit_conc_code, String starting_conc_code, String creeping_conc_code, String const_conc_code) {
        final Function function = new Function(
                FUNC_EXAMINE1, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_json), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(conc_code), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(volt_conc_code), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(intuit_conc_code), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(starting_conc_code), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(creeping_conc_code), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(const_conc_code)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void examine1(String _json, String conc_code, String volt_conc_code, String intuit_conc_code, String starting_conc_code, String creeping_conc_code, String const_conc_code, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_EXAMINE1, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_json), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(conc_code), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(volt_conc_code), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(intuit_conc_code), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(starting_conc_code), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(creeping_conc_code), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(const_conc_code)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForExamine1(String _json, String conc_code, String volt_conc_code, String intuit_conc_code, String starting_conc_code, String creeping_conc_code, String const_conc_code) {
        final Function function = new Function(
                FUNC_EXAMINE1, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_json), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(conc_code), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(volt_conc_code), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(intuit_conc_code), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(starting_conc_code), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(creeping_conc_code), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(const_conc_code)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple7<String, String, String, String, String, String, String> getExamine1Input(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_EXAMINE1, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple7<String, String, String, String, String, String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (String) results.get(2).getValue(), 
                (String) results.get(3).getValue(), 
                (String) results.get(4).getValue(), 
                (String) results.get(5).getValue(), 
                (String) results.get(6).getValue()
                );
    }

    public Tuple3<Boolean, String, BigInteger> getExamine1Output(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_EXAMINE1, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<Boolean, String, BigInteger>(

                (Boolean) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue()
                );
    }

    public TransactionReceipt examine2(BigInteger dayerr_conc_code, BigInteger clock_error, BigInteger met_value, BigInteger std_value, BigInteger time_err, String clock_conc) {
        final Function function = new Function(
                FUNC_EXAMINE2, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(dayerr_conc_code), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(clock_error), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(met_value), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(std_value), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(time_err), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(clock_conc)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void examine2(BigInteger dayerr_conc_code, BigInteger clock_error, BigInteger met_value, BigInteger std_value, BigInteger time_err, String clock_conc, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_EXAMINE2, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(dayerr_conc_code), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(clock_error), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(met_value), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(std_value), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(time_err), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(clock_conc)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForExamine2(BigInteger dayerr_conc_code, BigInteger clock_error, BigInteger met_value, BigInteger std_value, BigInteger time_err, String clock_conc) {
        final Function function = new Function(
                FUNC_EXAMINE2, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(dayerr_conc_code), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(clock_error), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(met_value), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(std_value), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(time_err), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(clock_conc)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple6<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, String> getExamine2Input(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_EXAMINE2, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}, new TypeReference<Int256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple6<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, String>(

                (BigInteger) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue(), 
                (BigInteger) results.get(3).getValue(), 
                (BigInteger) results.get(4).getValue(), 
                (String) results.get(5).getValue()
                );
    }

    public Tuple3<Boolean, String, BigInteger> getExamine2Output(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_EXAMINE2, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<Boolean, String, BigInteger>(

                (Boolean) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue()
                );
    }

    public TransactionReceipt examine_1(String _json) {
        final Function function = new Function(
                FUNC_EXAMINE_1, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_json)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void examine_1(String _json, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_EXAMINE_1, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_json)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForExamine_1(String _json) {
        final Function function = new Function(
                FUNC_EXAMINE_1, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_json)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getExamine_1Input(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_EXAMINE_1, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public Tuple3<Boolean, String, BigInteger> getExamine_1Output(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_EXAMINE_1, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<Boolean, String, BigInteger>(

                (Boolean) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue()
                );
    }

    public TransactionReceipt examine_2(String conc_code, String volt_conc_code, String intuit_conc_code, String starting_conc_code, String creeping_conc_code, String const_conc_code, String base_err_code, String need_err_code) {
        final Function function = new Function(
                FUNC_EXAMINE_2, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(conc_code), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(volt_conc_code), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(intuit_conc_code), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(starting_conc_code), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(creeping_conc_code), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(const_conc_code), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(base_err_code), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(need_err_code)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void examine_2(String conc_code, String volt_conc_code, String intuit_conc_code, String starting_conc_code, String creeping_conc_code, String const_conc_code, String base_err_code, String need_err_code, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_EXAMINE_2, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(conc_code), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(volt_conc_code), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(intuit_conc_code), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(starting_conc_code), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(creeping_conc_code), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(const_conc_code), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(base_err_code), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(need_err_code)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForExamine_2(String conc_code, String volt_conc_code, String intuit_conc_code, String starting_conc_code, String creeping_conc_code, String const_conc_code, String base_err_code, String need_err_code) {
        final Function function = new Function(
                FUNC_EXAMINE_2, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(conc_code), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(volt_conc_code), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(intuit_conc_code), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(starting_conc_code), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(creeping_conc_code), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(const_conc_code), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(base_err_code), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(need_err_code)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple8<String, String, String, String, String, String, String, String> getExamine_2Input(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_EXAMINE_2, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple8<String, String, String, String, String, String, String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (String) results.get(2).getValue(), 
                (String) results.get(3).getValue(), 
                (String) results.get(4).getValue(), 
                (String) results.get(5).getValue(), 
                (String) results.get(6).getValue(), 
                (String) results.get(7).getValue()
                );
    }

    public Tuple3<Boolean, String, BigInteger> getExamine_2Output(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_EXAMINE_2, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<Boolean, String, BigInteger>(

                (Boolean) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue()
                );
    }

    public TransactionReceipt examine_4(BigInteger dayerr_conc_code) {
        final Function function = new Function(
                FUNC_EXAMINE_4, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(dayerr_conc_code)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void examine_4(BigInteger dayerr_conc_code, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_EXAMINE_4, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(dayerr_conc_code)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForExamine_4(BigInteger dayerr_conc_code) {
        final Function function = new Function(
                FUNC_EXAMINE_4, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(dayerr_conc_code)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<BigInteger> getExamine_4Input(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_EXAMINE_4, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public Tuple3<Boolean, String, BigInteger> getExamine_4Output(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_EXAMINE_4, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<Boolean, String, BigInteger>(

                (Boolean) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue()
                );
    }

    public TransactionReceipt examine_5(BigInteger clock_error, BigInteger met_value, BigInteger std_value, BigInteger time_err, String clock_conc) {
        final Function function = new Function(
                FUNC_EXAMINE_5, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(clock_error), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(met_value), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(std_value), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(time_err), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(clock_conc)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void examine_5(BigInteger clock_error, BigInteger met_value, BigInteger std_value, BigInteger time_err, String clock_conc, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_EXAMINE_5, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(clock_error), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(met_value), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(std_value), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(time_err), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(clock_conc)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForExamine_5(BigInteger clock_error, BigInteger met_value, BigInteger std_value, BigInteger time_err, String clock_conc) {
        final Function function = new Function(
                FUNC_EXAMINE_5, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(clock_error), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(met_value), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(std_value), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(time_err), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(clock_conc)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple5<BigInteger, BigInteger, BigInteger, BigInteger, String> getExamine_5Input(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_EXAMINE_5, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple5<BigInteger, BigInteger, BigInteger, BigInteger, String>(

                (BigInteger) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue(), 
                (BigInteger) results.get(3).getValue(), 
                (String) results.get(4).getValue()
                );
    }

    public Tuple3<Boolean, String, BigInteger> getExamine_5Output(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_EXAMINE_5, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<Boolean, String, BigInteger>(

                (Boolean) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue()
                );
    }

    public TransactionReceipt hashCompareInternal(String _a, String _b) {
        final Function function = new Function(
                FUNC_HASHCOMPAREINTERNAL, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_a), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_b)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void hashCompareInternal(String _a, String _b, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_HASHCOMPAREINTERNAL, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_a), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_b)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForHashCompareInternal(String _a, String _b) {
        final Function function = new Function(
                FUNC_HASHCOMPAREINTERNAL, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_a), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_b)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, String> getHashCompareInternalInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_HASHCOMPAREINTERNAL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue()
                );
    }

    public Tuple1<Boolean> getHashCompareInternalOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_HASHCOMPAREINTERNAL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public static Hzwq2 load(String contractAddress, Client client, CryptoKeyPair credential) {
        return new Hzwq2(contractAddress, client, credential);
    }

    public static Hzwq2 deploy(Client client, CryptoKeyPair credential) throws ContractException {
        return deploy(Hzwq2.class, client, credential, getBinary(client.getCryptoSuite()), "");
    }
}
