package org.springblade.modules.trace.contract;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.sdk.abi.FunctionReturnDecoder;
import org.fisco.bcos.sdk.abi.TypeReference;
import org.fisco.bcos.sdk.abi.datatypes.Bool;
import org.fisco.bcos.sdk.abi.datatypes.Event;
import org.fisco.bcos.sdk.abi.datatypes.Function;
import org.fisco.bcos.sdk.abi.datatypes.Type;
import org.fisco.bcos.sdk.abi.datatypes.Utf8String;
import org.fisco.bcos.sdk.abi.datatypes.generated.Uint256;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple1;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple2;
import org.fisco.bcos.sdk.client.Client;
import org.fisco.bcos.sdk.contract.Contract;
import org.fisco.bcos.sdk.crypto.CryptoSuite;
import org.fisco.bcos.sdk.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.eventsub.EventCallback;
import org.fisco.bcos.sdk.model.CryptoType;
import org.fisco.bcos.sdk.model.TransactionReceipt;
import org.fisco.bcos.sdk.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.transaction.model.exception.ContractException;

@SuppressWarnings("unchecked")
public class Hzwq extends Contract {
    public static final String[] BINARY_ARRAY = {"","60405280600b81526020017f6469766963655f6e616d6500000000000000000000000000000000000000000081525090506113ef565b600982141561104e576040518060400160405280601581526020017f6469766963655f63657274696669636174655f6e6f000000000000000000000081525090506113ef565b600a821415611094576040518060400160405280601381526020017f6469766963655f657870697265645f646174650000000000000000000000000081525090506113ef565b600b8214156110da576040518060400160405280600a81526020017f65717569705f6e616d650000000000000000000000000000000000000000000081525090506113ef565b600c821415611120576040518060400160405280601481526020017f65717569705f63657274696669636174655f6e6f00000000000000000000000081525090506113ef565b600d821415611166576040518060400160405280601281526020017f65717569705f657870697265645f64617465000000000000000000000000000081525090506113ef565b600e8214156111ac576040518060400160405280600581526020017f706c61636500000000000000000000000000000000000000000000000000000081525090506113ef565b600f8214156111f2576040518060400160405280600a81526020017f74656d706572617572650000000000000000000000000000000000000000000081525090506113ef565b6010821415611238576040518060400160405280600881526020017f68756d696469747900000000000000000000000000000000000000000000000081525090506113ef565b601182141561127e576040518060400160405280600d81526020017f6465746563745f706572736f6e0000000000000000000000000000000000000081525090506113ef565b60128214156112c4576040518060400160405280600e81526020017f6c696e655f636572746e6f5f696400000000000000000000000000000000000081525090506113ef565b601382141561130a576040518060400160405280600c81526020017f61756469745f706572736f6e000000000000000000000000000000000000000081525090506113ef565b6014821415611350576040518060400160405280600a81526020017f636f6e636c7573696f6e0000000000000000000000000000000000000000000081525090506113ef565b6015821415611396576040518060400160405280600781526020017f636572745f6e6f0000000000000000000000000000000000000000000000000081525090506113ef565b60168214156113dc576040518060400160405280600981526020017f636572745f636f6465000000000000000000000000000000000000000000000081525090506113ef565b6040518060200160405280600081525090505b919050565b60608083905060608390506060815183510167ffffffffffffffff8111801561141c57600080fd5b506040519080825280601f01601f19166020018201604052801561144f5781602001600182028036833780820191505090505b5090506060819050600080905060008090505b85518110156114d05785818151811061147757fe5b602001015160f81c60f81b83838060010194508151811061149457fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508080600101915050611462565b600090505b8451811015611543578481815181106114ea57fe5b602001015160f81c60f81b83838060010194508151811061150757fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535080806001019150506114d5565b83965050505050505092915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061159357805160ff19168380011785556115c1565b828001600101855582156115c1579182015b828111156115c05782518255916020019190600101906115a5565b5b5090506115ce91906115d2565b5090565b6115f491905b808211156115f05760008160009055506001016115d8565b5090565b9056fea26469706673582212202eac85189e6ce4d896e09648766fc7c90f550ad2bf021a550f8bc04b29e6e68464736f6c634300060a0033"};

    public static final String BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {"","81525090506112ab565b600d821415611022576040518060400160405280601281526020017f65717569705f657870697265645f64617465000000000000000000000000000081525090506112ab565b600e821415611068576040518060400160405280600581526020017f706c61636500000000000000000000000000000000000000000000000000000081525090506112ab565b600f8214156110ae576040518060400160405280600a81526020017f74656d706572617572650000000000000000000000000000000000000000000081525090506112ab565b60108214156110f4576040518060400160405280600881526020017f68756d696469747900000000000000000000000000000000000000000000000081525090506112ab565b601182141561113a576040518060400160405280600d81526020017f6465746563745f706572736f6e0000000000000000000000000000000000000081525090506112ab565b6012821415611180576040518060400160405280600e81526020017f6c696e655f636572746e6f5f696400000000000000000000000000000000000081525090506112ab565b60138214156111c6576040518060400160405280600c81526020017f61756469745f706572736f6e000000000000000000000000000000000000000081525090506112ab565b601482141561120c576040518060400160405280600a81526020017f636f6e636c7573696f6e0000000000000000000000000000000000000000000081525090506112ab565b6015821415611252576040518060400160405280600781526020017f636572745f6e6f0000000000000000000000000000000000000000000000000081525090506112ab565b6016821415611298576040518060400160405280600981526020017f636572745f636f6465000000000000000000000000000000000000000000000081525090506112ab565b6040518060200160405280600081525090505b919050565b606060008214156112f8576040518060400160405280600181526020017f300000000000000000000000000000000000000000000000000000000000000081525090506113ef565b600082905060005b60008214611322578080600101915050600a828161131a57fe5b049150611300565b60608167ffffffffffffffff8111801561133b57600080fd5b506040519080825280601f01601f19166020018201604052801561136e5781602001600182028036833780820191505090505b50905060006001830390505b600086146113e757600a868161138c57fe5b0660300160f81b828280600190039350815181106113a657fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a86816113df57fe5b04955061137a565b819450505050505b919050565b60608083905060608390506060815183510167ffffffffffffffff8111801561141c57600080fd5b506040519080825280601f01601f19166020018201604052801561144f5781602001600182028036833780820191505090505b5090506060819050600080905060008090505b85518110156114d05785818151811061147757fe5b602001015160f81c60f81b83838060010194508151811061149457fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508080600101915050611462565b600090505b8451811015611543578481815181106114ea57fe5b602001015160f81c60f81b83838060010194508151811061150757fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535080806001019150506114d5565b83965050505050505092915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061159357805160ff19168380011785556115c1565b828001600101855582156115c1579182015b828111156115c05782518255916020019190600101906115a5565b5b5090506115ce91906115d2565b5090565b6115f491905b808211156115f05760008160009055506001016115d8565b5090565b9056fea26469706673582212201b288f193dc7810635de69fe8b0a1a61c0566a4149d4d42e12b5a48007e7c7c964736f6c634300060a0033"};

    public static final String SM_BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"LogOnlyCode\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_json\",\"type\":\"string\"}],\"name\":\"checkJson\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_json\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_type\",\"type\":\"uint256\"}],\"name\":\"checkJsonData\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_head\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_type\",\"type\":\"uint256\"}],\"name\":\"onlyCode\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"randomCode\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"randomStr\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]"};

    public static final String ABI = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", ABI_ARRAY);

    public static final String FUNC_CHECKJSON = "checkJson";

    public static final String FUNC_CHECKJSONDATA = "checkJsonData";

    public static final String FUNC_ONLYCODE = "onlyCode";

    public static final String FUNC_RANDOMCODE = "randomCode";

    public static final String FUNC_RANDOMSTR = "randomStr";

    public static final Event LOGONLYCODE_EVENT = new Event("LogOnlyCode", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
    ;

    protected Hzwq(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public List<LogOnlyCodeEventResponse> getLogOnlyCodeEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(LOGONLYCODE_EVENT, transactionReceipt);
        ArrayList<LogOnlyCodeEventResponse> responses = new ArrayList<LogOnlyCodeEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            LogOnlyCodeEventResponse typedResponse = new LogOnlyCodeEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.LogOnlyCodeParam0 = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeLogOnlyCodeEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(LOGONLYCODE_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeLogOnlyCodeEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(LOGONLYCODE_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public TransactionReceipt checkJson(String _json) {
        final Function function = new Function(
                FUNC_CHECKJSON, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_json)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void checkJson(String _json, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_CHECKJSON, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_json)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForCheckJson(String _json) {
        final Function function = new Function(
                FUNC_CHECKJSON, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_json)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getCheckJsonInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_CHECKJSON, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public Tuple1<Boolean> getCheckJsonOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_CHECKJSON, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public TransactionReceipt checkJsonData(String _json, BigInteger _type) {
        final Function function = new Function(
                FUNC_CHECKJSONDATA, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_json), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_type)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void checkJsonData(String _json, BigInteger _type, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_CHECKJSONDATA, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_json), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_type)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForCheckJsonData(String _json, BigInteger _type) {
        final Function function = new Function(
                FUNC_CHECKJSONDATA, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_json), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_type)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, BigInteger> getCheckJsonDataInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_CHECKJSONDATA, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, BigInteger>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue()
                );
    }

    public Tuple1<Boolean> getCheckJsonDataOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_CHECKJSONDATA, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public TransactionReceipt onlyCode(String _head, BigInteger _type) {
        final Function function = new Function(
                FUNC_ONLYCODE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_head), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_type)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void onlyCode(String _head, BigInteger _type, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ONLYCODE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_head), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_type)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForOnlyCode(String _head, BigInteger _type) {
        final Function function = new Function(
                FUNC_ONLYCODE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_head), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_type)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, BigInteger> getOnlyCodeInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ONLYCODE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, BigInteger>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue()
                );
    }

    public Tuple1<String> getOnlyCodeOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_ONLYCODE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public TransactionReceipt randomCode() {
        final Function function = new Function(
                FUNC_RANDOMCODE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void randomCode(TransactionCallback callback) {
        final Function function = new Function(
                FUNC_RANDOMCODE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForRandomCode() {
        final Function function = new Function(
                FUNC_RANDOMCODE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getRandomCodeOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_RANDOMCODE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public String randomStr() throws ContractException {
        final Function function = new Function(FUNC_RANDOMSTR, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public static Hzwq load(String contractAddress, Client client, CryptoKeyPair credential) {
        return new Hzwq(contractAddress, client, credential);
    }

    public static Hzwq deploy(Client client, CryptoKeyPair credential) throws ContractException {
        return deploy(Hzwq.class, client, credential, getBinary(client.getCryptoSuite()), "");
    }

    public static class LogOnlyCodeEventResponse {
        public TransactionReceipt.Logs log;

        public String LogOnlyCodeParam0;
    }
}
